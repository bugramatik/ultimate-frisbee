

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Wed May 24 18:56:08 2023

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    42                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    43  0000                     
    44                           ; Version 2.20
    45                           ; Generated 12/02/2020 GMT
    46                           ; 
    47                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4620 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  001E7C                     __pidataCOMRAM:
    81                           	callstack 0
    82                           
    83                           ;initializer for _lcd_y
    84  001E7C  01                 	db	1
    85                           
    86                           ;initializer for _lcd_x
    87  001E7D  01                 	db	1
    88                           
    89                           	psect	idataBANK0
    90  001E74                     __pidataBANK0:
    91                           	callstack 0
    92                           
    93                           ;initializer for _character
    94  001E74  00                 	db	0
    95  001E75  00                 	db	0
    96  001E76  0A                 	db	10
    97  001E77  1F                 	db	31
    98  001E78  1F                 	db	31
    99  001E79  0E                 	db	14
   100  001E7A  04                 	db	4
   101  001E7B  00                 	db	0
   102  0000                     _TRISBbits	set	3987
   103  0000                     _INTCON3bits	set	4080
   104  0000                     _INTCONbits	set	4082
   105  0000                     _TRISD	set	3989
   106  0000                     _TRISEbits	set	3990
   107  0000                     _PORTD	set	3971
   108  0000                     _PORTEbits	set	3972
   109  0000                     _ADCON2bits	set	4032
   110  0000                     _TRISAbits	set	3986
   111  0000                     _ADCON1bits	set	4033
   112  0000                     _ADRESL	set	4035
   113  0000                     _ADRESH	set	4036
   114  0000                     _PIR1bits	set	3998
   115  0000                     _ADCON0bits	set	4034
   116                           
   117                           	psect	smallconst
   118  001000                     __psmallconst:
   119                           	callstack 0
   120  001000  00                 	db	0
   121  001001                     STR_1:
   122  001001  48                 	db	72	;'H'
   123  001002  65                 	db	101	;'e'
   124  001003  6C                 	db	108	;'l'
   125  001004  6C                 	db	108	;'l'
   126  001005  6F                 	db	111	;'o'
   127  001006  6F                 	db	111	;'o'
   128  001007  20                 	db	32
   129  001008  00                 	db	0
   130  001009                     STR_2:
   131  001009  25                 	db	37
   132  00100A  64                 	db	100	;'d'
   133  00100B  00                 	db	0
   134  00100C  00                 	db	0	; dummy byte at the end
   135  0000                     
   136                           ; #config settings
   137                           
   138                           	psect	cinit
   139  001BDA                     __pcinit:
   140                           	callstack 0
   141  001BDA                     start_initialization:
   142                           	callstack 0
   143  001BDA                     __initialization:
   144                           	callstack 0
   145                           
   146                           ; Initialize objects allocated to BANK0 (8 bytes)
   147                           ; load TBLPTR registers with __pidataBANK0
   148  001BDA  0E74               	movlw	low __pidataBANK0
   149  001BDC  6EF6               	movwf	tblptrl,c
   150  001BDE  0E1E               	movlw	high __pidataBANK0
   151  001BE0  6EF7               	movwf	tblptrh,c
   152  001BE2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   153  001BE4  6EF8               	movwf	tblptru,c
   154  001BE6  EE00  F0D4         	lfsr	0,__pdataBANK0
   155  001BEA  EE10 F008          	lfsr	1,8
   156  001BEE                     copy_data0:
   157  001BEE  0009               	tblrd		*+
   158  001BF0  CFF5 FFEE          	movff	tablat,postinc0
   159  001BF4  50E5               	movf	postdec1,w,c
   160  001BF6  50E1               	movf	fsr1l,w,c
   161  001BF8  E1FA               	bnz	copy_data0
   162                           
   163                           ; Initialize objects allocated to COMRAM (2 bytes)
   164                           ; load TBLPTR registers with __pidataCOMRAM
   165  001BFA  0E7C               	movlw	low __pidataCOMRAM
   166  001BFC  6EF6               	movwf	tblptrl,c
   167  001BFE  0E1E               	movlw	high __pidataCOMRAM
   168  001C00  6EF7               	movwf	tblptrh,c
   169  001C02  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   170  001C04  6EF8               	movwf	tblptru,c
   171  001C06  0009               	tblrd		*+	;fetch initializer
   172  001C08  CFF5 F071          	movff	tablat,__pdataCOMRAM
   173  001C0C  0009               	tblrd		*+	;fetch initializer
   174  001C0E  CFF5 F072          	movff	tablat,__pdataCOMRAM+1
   175                           
   176                           ; Clear objects allocated to BANK0 (72 bytes)
   177  001C12  EE00  F080         	lfsr	0,__pbssBANK0
   178  001C16  0E48               	movlw	72
   179  001C18                     clear_0:
   180  001C18  6AEE               	clrf	postinc0,c
   181  001C1A  06E8               	decf	wreg,f,c
   182  001C1C  E1FD               	bnz	clear_0
   183                           
   184                           ; Clear objects allocated to COMRAM (7 bytes)
   185  001C1E  EE00  F06A         	lfsr	0,__pbssCOMRAM
   186  001C22  0E07               	movlw	7
   187  001C24                     clear_1:
   188  001C24  6AEE               	clrf	postinc0,c
   189  001C26  06E8               	decf	wreg,f,c
   190  001C28  E1FD               	bnz	clear_1
   191  001C2A                     end_of_initialization:
   192                           	callstack 0
   193  001C2A                     __end_of__initialization:
   194                           	callstack 0
   195  001C2A  9073               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   196  001C2C  9273               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   197  001C2E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   198  001C30  6EF8               	movwf	tblptru,c
   199  001C32  0100               	movlb	0
   200  001C34  EFE1  F00C         	goto	_main	;jump to C main() function
   201                           
   202                           	psect	bssCOMRAM
   203  00006A                     __pbssCOMRAM:
   204                           	callstack 0
   205  00006A                     _width:
   206                           	callstack 0
   207  00006A                     	ds	2
   208  00006C                     _prec:
   209                           	callstack 0
   210  00006C                     	ds	2
   211  00006E                     _flags:
   212                           	callstack 0
   213  00006E                     	ds	2
   214  000070                     _CONVERT:
   215                           	callstack 0
   216  000070                     	ds	1
   217                           
   218                           	psect	dataCOMRAM
   219  000071                     __pdataCOMRAM:
   220                           	callstack 0
   221  000071                     _lcd_y:
   222                           	callstack 0
   223  000071                     	ds	1
   224  000072                     _lcd_x:
   225                           	callstack 0
   226  000072                     	ds	1
   227                           
   228                           	psect	bssBANK0
   229  000080                     __pbssBANK0:
   230                           	callstack 0
   231  000080                     _gameState:
   232                           	callstack 0
   233  000080                     	ds	28
   234  00009C                     	ds	10
   235  0000A6                     _nout:
   236                           	callstack 0
   237  0000A6                     	ds	2
   238  0000A8                     _dbuf:
   239                           	callstack 0
   240  0000A8                     	ds	32
   241                           
   242                           	psect	dataBANK0
   243  0000D4                     __pdataBANK0:
   244                           	callstack 0
   245  0000D4                     _character:
   246                           	callstack 0
   247  0000D4                     	ds	8
   248                           
   249                           	psect	cstackBANK0
   250  0000C8                     __pcstackBANK0:
   251                           	callstack 0
   252  0000C8                     main@values:
   253                           	callstack 0
   254                           
   255                           ; 10 bytes @ 0x0
   256  0000C8                     	ds	10
   257  0000D2                     main@convertion:
   258                           	callstack 0
   259                           
   260                           ; 2 bytes @ 0xA
   261  0000D2                     	ds	2
   262                           
   263                           	psect	cstackCOMRAM
   264  000001                     __pcstackCOMRAM:
   265                           	callstack 0
   266  000001                     ??_FNC:
   267  000001                     
   268                           ; 1 bytes @ 0x0
   269  000001                     	ds	2
   270  000003                     ??_LCDCmd:
   271  000003                     ??_LCDDat:
   272  000003                     ?_strlen:
   273                           	callstack 0
   274  000003                     ?_readADCChannel:
   275                           	callstack 0
   276  000003                     ?___aodiv:
   277                           	callstack 0
   278  000003                     ?___aomod:
   279                           	callstack 0
   280  000003                     fputc@c:
   281                           	callstack 0
   282  000003                     strlen@s:
   283                           	callstack 0
   284  000003                     ___aodiv@dividend:
   285                           	callstack 0
   286  000003                     ___aomod@dividend:
   287                           	callstack 0
   288                           
   289                           ; 8 bytes @ 0x2
   290  000003                     	ds	1
   291  000004                     LCDCmd@cmd:
   292                           	callstack 0
   293  000004                     LCDDat@dat:
   294                           	callstack 0
   295                           
   296                           ; 1 bytes @ 0x3
   297  000004                     	ds	1
   298  000005                     ??_readADCChannel:
   299  000005                     LCDGoto@p_1:
   300                           	callstack 0
   301  000005                     LCDStr@str:
   302                           	callstack 0
   303  000005                     LCDAddSpecialCharacter@data:
   304                           	callstack 0
   305  000005                     fputc@fp:
   306                           	callstack 0
   307  000005                     strlen@a:
   308                           	callstack 0
   309                           
   310                           ; 2 bytes @ 0x4
   311  000005                     	ds	1
   312  000006                     LCDGoto@p_2:
   313                           	callstack 0
   314                           
   315                           ; 1 bytes @ 0x5
   316  000006                     	ds	1
   317  000007                     ??_fputc:
   318  000007                     ??_LCDStr:
   319  000007                     readADCChannel@channel:
   320                           	callstack 0
   321  000007                     LCDAddSpecialCharacter@character_index:
   322                           	callstack 0
   323                           
   324                           ; 1 bytes @ 0x6
   325  000007                     	ds	1
   326  000008                     LCDAddSpecialCharacter@i:
   327                           	callstack 0
   328                           
   329                           ; 1 bytes @ 0x7
   330  000008                     	ds	1
   331  000009                     LCDStr@i:
   332                           	callstack 0
   333                           
   334                           ; 1 bytes @ 0x8
   335  000009                     	ds	2
   336  00000B                     ___aodiv@divisor:
   337                           	callstack 0
   338  00000B                     ___aomod@divisor:
   339                           	callstack 0
   340                           
   341                           ; 8 bytes @ 0xA
   342  00000B                     	ds	1
   343  00000C                     fputs@s:
   344                           	callstack 0
   345                           
   346                           ; 2 bytes @ 0xB
   347  00000C                     	ds	2
   348  00000E                     fputs@fp:
   349                           	callstack 0
   350                           
   351                           ; 2 bytes @ 0xD
   352  00000E                     	ds	2
   353  000010                     fputs@c:
   354                           	callstack 0
   355                           
   356                           ; 1 bytes @ 0xF
   357  000010                     	ds	1
   358  000011                     fputs@i:
   359                           	callstack 0
   360                           
   361                           ; 2 bytes @ 0x10
   362  000011                     	ds	2
   363  000013                     ?_pad:
   364                           	callstack 0
   365  000013                     ___aodiv@counter:
   366                           	callstack 0
   367  000013                     ___aomod@counter:
   368                           	callstack 0
   369  000013                     pad@fp:
   370                           	callstack 0
   371                           
   372                           ; 2 bytes @ 0x12
   373  000013                     	ds	1
   374  000014                     ___aodiv@sign:
   375                           	callstack 0
   376  000014                     ___aomod@sign:
   377                           	callstack 0
   378                           
   379                           ; 1 bytes @ 0x13
   380  000014                     	ds	1
   381  000015                     ?_abs:
   382                           	callstack 0
   383  000015                     pad@buf:
   384                           	callstack 0
   385  000015                     abs@a:
   386                           	callstack 0
   387  000015                     ___aodiv@quotient:
   388                           	callstack 0
   389                           
   390                           ; 8 bytes @ 0x14
   391  000015                     	ds	2
   392  000017                     ??_abs:
   393  000017                     pad@p:
   394                           	callstack 0
   395                           
   396                           ; 2 bytes @ 0x16
   397  000017                     	ds	2
   398  000019                     ??_pad:
   399                           
   400                           ; 1 bytes @ 0x18
   401  000019                     	ds	1
   402  00001A                     pad@i:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0x19
   406  00001A                     	ds	2
   407  00001C                     pad@w:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0x1B
   411  00001C                     	ds	2
   412  00001E                     ?_dtoa:
   413                           	callstack 0
   414  00001E                     dtoa@fp:
   415                           	callstack 0
   416                           
   417                           ; 2 bytes @ 0x1D
   418  00001E                     	ds	2
   419  000020                     dtoa@d:
   420                           	callstack 0
   421                           
   422                           ; 8 bytes @ 0x1F
   423  000020                     	ds	8
   424  000028                     ??_dtoa:
   425                           
   426                           ; 1 bytes @ 0x27
   427  000028                     	ds	8
   428  000030                     _dtoa$1153:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0x2F
   432  000030                     	ds	2
   433  000032                     dtoa@p:
   434                           	callstack 0
   435                           
   436                           ; 2 bytes @ 0x31
   437  000032                     	ds	2
   438  000034                     dtoa@w:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x33
   442  000034                     	ds	2
   443  000036                     dtoa@s:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x35
   447  000036                     	ds	2
   448  000038                     dtoa@n:
   449                           	callstack 0
   450                           
   451                           ; 8 bytes @ 0x37
   452  000038                     	ds	8
   453  000040                     dtoa@i:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x3F
   457  000040                     	ds	2
   458  000042                     ?_vfpfcnvrt:
   459                           	callstack 0
   460  000042                     vfpfcnvrt@fp:
   461                           	callstack 0
   462                           
   463                           ; 2 bytes @ 0x41
   464  000042                     	ds	2
   465  000044                     vfpfcnvrt@fmt:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0x43
   469  000044                     	ds	2
   470  000046                     vfpfcnvrt@ap:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x45
   474  000046                     	ds	2
   475  000048                     ??_vfpfcnvrt:
   476                           
   477                           ; 1 bytes @ 0x47
   478  000048                     	ds	2
   479  00004A                     vfpfcnvrt@ll:
   480                           	callstack 0
   481                           
   482                           ; 8 bytes @ 0x49
   483  00004A                     	ds	8
   484  000052                     ?_vfprintf:
   485                           	callstack 0
   486  000052                     vfprintf@fp:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0x51
   490  000052                     	ds	2
   491  000054                     vfprintf@fmt:
   492                           	callstack 0
   493                           
   494                           ; 2 bytes @ 0x53
   495  000054                     	ds	2
   496  000056                     vfprintf@ap:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0x55
   500  000056                     	ds	2
   501  000058                     vfprintf@cfmt:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x57
   505  000058                     	ds	2
   506  00005A                     ?_sprintf:
   507                           	callstack 0
   508  00005A                     sprintf@s:
   509                           	callstack 0
   510                           
   511                           ; 2 bytes @ 0x59
   512  00005A                     	ds	2
   513  00005C                     sprintf@fmt:
   514                           	callstack 0
   515                           
   516                           ; 2 bytes @ 0x5B
   517  00005C                     	ds	4
   518  000060                     
   519                           ; 1 bytes @ 0x5F
   520  000060                     	ds	2
   521  000062                     sprintf@ap:
   522                           	callstack 0
   523                           
   524                           ; 2 bytes @ 0x61
   525  000062                     	ds	2
   526  000064                     sprintf@f:
   527                           	callstack 0
   528                           
   529                           ; 6 bytes @ 0x63
   530  000064                     	ds	6
   531  00006A                     
   532                           ; 1 bytes @ 0x69
   533 ;;
   534 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   535 ;;
   536 ;; *************** function _main *****************
   537 ;; Defined at:
   538 ;;		line 61 in file "newmain.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;		None
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  values         10    0[BANK0 ] unsigned char [10]
   543 ;;  convertion      2   10[BANK0 ] unsigned short 
   544 ;; Return value:  Size  Location     Type
   545 ;;                  1    wreg      void 
   546 ;; Registers used:
   547 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   548 ;; Tracked objects:
   549 ;;		On entry : 0/0
   550 ;;		On exit  : 0/0
   551 ;;		Unchanged: 0/0
   552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   554 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   556 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   557 ;;Total ram usage:       12 bytes
   558 ;; Hardware stack levels required when called:    9
   559 ;; This function calls:
   560 ;;		_InitLCD
   561 ;;		_LCDAddSpecialCharacter
   562 ;;		_LCDCmd
   563 ;;		_LCDDat
   564 ;;		_LCDGoto
   565 ;;		_LCDStr
   566 ;;		_initADC
   567 ;;		_readADCChannel
   568 ;;		_sprintf
   569 ;; This function is called by:
   570 ;;		Startup code after reset
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574                           	psect	text0
   575  0019C2                     __ptext0:
   576                           	callstack 0
   577  0019C2                     _main:
   578                           	callstack 22
   579  0019C2                     
   580                           ;newmain.c: 63:     initADC();
   581  0019C2  EC28  F00F         	call	_initADC	;wreg free
   582  0019C6                     
   583                           ;newmain.c: 65:     InitLCD();
   584  0019C6  ECF7  F00E         	call	_InitLCD	;wreg free
   585  0019CA                     
   586                           ;newmain.c: 68:     LCDStr("Helloo ");
   587  0019CA  0E01               	movlw	low STR_1
   588  0019CC  6E05               	movwf	LCDStr@str^0,c
   589  0019CE  0E10               	movlw	high STR_1
   590  0019D0  6E06               	movwf	(LCDStr@str+1)^0,c
   591  0019D2  EC8B  F00C         	call	_LCDStr	;wreg free
   592  0019D6                     
   593                           ;newmain.c: 70:     LCDAddSpecialCharacter(0, character);
   594  0019D6  0ED4               	movlw	low _character
   595  0019D8  6E05               	movwf	LCDAddSpecialCharacter@data^0,c
   596  0019DA  0E00               	movlw	high _character
   597  0019DC  6E06               	movwf	(LCDAddSpecialCharacter@data+1)^0,c
   598  0019DE  0E00               	movlw	0
   599  0019E0  ECA7  F00E         	call	_LCDAddSpecialCharacter
   600  0019E4                     
   601                           ;newmain.c: 71:     LCDGoto(8, 1);
   602  0019E4  0E01               	movlw	1
   603  0019E6  6E05               	movwf	LCDGoto@p_1^0,c
   604  0019E8  0E08               	movlw	8
   605  0019EA  EC82  F00D         	call	_LCDGoto
   606  0019EE                     
   607                           ;newmain.c: 72:     LCDDat(0);
   608  0019EE  0E00               	movlw	0
   609  0019F0  ECDE  F00E         	call	_LCDDat
   610  0019F4                     
   611                           ;newmain.c: 74:     char values[10] = {0};
   612  0019F4  EE20  F0C8         	lfsr	2,main@values
   613  0019F8  0E09               	movlw	9
   614  0019FA                     u1711:
   615  0019FA  6ADE               	clrf	postinc2,c
   616  0019FC  06E8               	decf	wreg,f,c
   617  0019FE  E2FD               	bc	u1711
   618  001A00                     
   619                           ;newmain.c: 78:     TRISBbits.RB0 = 1;
   620  001A00  8093               	bsf	147,0,c	;volatile
   621  001A02                     
   622                           ;newmain.c: 79:     INTCONbits.INT0IE = 1;
   623  001A02  88F2               	bsf	242,4,c	;volatile
   624  001A04                     
   625                           ;newmain.c: 80:     INTCONbits.INT0IF = 0;
   626  001A04  92F2               	bcf	242,1,c	;volatile
   627  001A06                     
   628                           ;newmain.c: 81:     INTCONbits.GIE = 1;
   629  001A06  8EF2               	bsf	242,7,c	;volatile
   630  001A08                     
   631                           ;newmain.c: 82:     INTCONbits.PEIE = 1;
   632  001A08  8CF2               	bsf	242,6,c	;volatile
   633  001A0A                     l2128:
   634                           
   635                           ;newmain.c: 87:     {;newmain.c: 88:         if(CONVERT == 1)
   636  001A0A  0470               	decf	_CONVERT^0,w,c	;volatile
   637  001A0C  A4D8               	btfss	status,2,c
   638  001A0E  EF0B  F00D         	goto	u1721
   639  001A12  EF0D  F00D         	goto	u1720
   640  001A16                     u1721:
   641  001A16  EF05  F00D         	goto	l2128
   642  001A1A                     u1720:
   643  001A1A                     
   644                           ;newmain.c: 89:         {;newmain.c: 90:             convertion = readADCChannel(0);
   645  001A1A  0E00               	movlw	0
   646  001A1C  EC36  F00D         	call	_readADCChannel
   647  001A20  C003  F0D2         	movff	?_readADCChannel,main@convertion
   648  001A24  C004  F0D3         	movff	?_readADCChannel+1,main@convertion+1
   649  001A28                     
   650                           ;newmain.c: 91:             sprintf(values, "%d", convertion);
   651  001A28  0EC8               	movlw	low main@values
   652  001A2A  6E5A               	movwf	sprintf@s^0,c
   653  001A2C  0E00               	movlw	high main@values
   654  001A2E  6E5B               	movwf	(sprintf@s+1)^0,c
   655  001A30  0E09               	movlw	low STR_2
   656  001A32  6E5C               	movwf	sprintf@fmt^0,c
   657  001A34  0E10               	movlw	high STR_2
   658  001A36  6E5D               	movwf	(sprintf@fmt+1)^0,c
   659  001A38  C0D2  F05E         	movff	main@convertion,?_sprintf+4
   660  001A3C  C0D3  F05F         	movff	main@convertion+1,?_sprintf+5
   661  001A40  EC1C  F00E         	call	_sprintf	;wreg free
   662  001A44                     
   663                           ;newmain.c: 92:             LCDCmd(0x01);
   664  001A44  0E01               	movlw	1
   665  001A46  EC10  F00F         	call	_LCDCmd
   666  001A4A                     
   667                           ;newmain.c: 93:             LCDGoto(5, 2);
   668  001A4A  0E02               	movlw	2
   669  001A4C  6E05               	movwf	LCDGoto@p_1^0,c
   670  001A4E  0E05               	movlw	5
   671  001A50  EC82  F00D         	call	_LCDGoto
   672  001A54                     
   673                           ;newmain.c: 94:             LCDStr(values);
   674  001A54  0EC8               	movlw	low main@values
   675  001A56  6E05               	movwf	LCDStr@str^0,c
   676  001A58  0E00               	movlw	high main@values
   677  001A5A  6E06               	movwf	(LCDStr@str+1)^0,c
   678  001A5C  EC8B  F00C         	call	_LCDStr	;wreg free
   679  001A60                     
   680                           ;newmain.c: 95:             CONVERT = 0;
   681  001A60  0E00               	movlw	0
   682  001A62  6E70               	movwf	_CONVERT^0,c	;volatile
   683  001A64  EF05  F00D         	goto	l2128
   684  001A68  EF07  F000         	goto	start
   685  001A6C                     __end_of_main:
   686                           	callstack 0
   687                           
   688 ;; *************** function _sprintf *****************
   689 ;; Defined at:
   690 ;;		line 9 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/nf_sprintf.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  s               2   89[COMRAM] PTR unsigned char 
   693 ;;		 -> main@values(10), 
   694 ;;  fmt             2   91[COMRAM] PTR const unsigned char 
   695 ;;		 -> STR_2(3), 
   696 ;; Auto vars:     Size  Location     Type
   697 ;;  f               6   99[COMRAM] struct _IO_FILE
   698 ;;  ap              2   97[COMRAM] PTR void [1]
   699 ;;		 -> ?_sprintf(2), 
   700 ;;  ret             2    0        int 
   701 ;; Return value:  Size  Location     Type
   702 ;;                  2   89[COMRAM] int 
   703 ;; Registers used:
   704 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   705 ;; Tracked objects:
   706 ;;		On entry : 0/0
   707 ;;		On exit  : 0/0
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   710 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   711 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   713 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   714 ;;Total ram usage:       16 bytes
   715 ;; Hardware stack levels used:    1
   716 ;; Hardware stack levels required when called:    8
   717 ;; This function calls:
   718 ;;		_vfprintf
   719 ;; This function is called by:
   720 ;;		_main
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           	psect	text1
   725  001C38                     __ptext1:
   726                           	callstack 0
   727  001C38                     _sprintf:
   728                           	callstack 22
   729  001C38  0E5E               	movlw	low (?_sprintf+4)
   730  001C3A  6E62               	movwf	sprintf@ap^0,c
   731  001C3C  0E00               	movlw	high (?_sprintf+4)
   732  001C3E  6E63               	movwf	(sprintf@ap+1)^0,c
   733  001C40  C05A  F064         	movff	sprintf@s,sprintf@f
   734  001C44  C05B  F065         	movff	sprintf@s+1,sprintf@f+1
   735  001C48  0E00               	movlw	0
   736  001C4A  6E67               	movwf	(sprintf@f+3)^0,c
   737  001C4C  0E00               	movlw	0
   738  001C4E  6E66               	movwf	(sprintf@f+2)^0,c
   739  001C50  0E00               	movlw	0
   740  001C52  6E69               	movwf	(sprintf@f+5)^0,c
   741  001C54  0E00               	movlw	0
   742  001C56  6E68               	movwf	(sprintf@f+4)^0,c
   743  001C58  0E64               	movlw	low sprintf@f
   744  001C5A  6E52               	movwf	vfprintf@fp^0,c
   745  001C5C  0E00               	movlw	high sprintf@f
   746  001C5E  6E53               	movwf	(vfprintf@fp+1)^0,c
   747  001C60  C05C  F054         	movff	sprintf@fmt,vfprintf@fmt
   748  001C64  C05D  F055         	movff	sprintf@fmt+1,vfprintf@fmt+1
   749  001C68  0E62               	movlw	low sprintf@ap
   750  001C6A  6E56               	movwf	vfprintf@ap^0,c
   751  001C6C  0E00               	movlw	high sprintf@ap
   752  001C6E  6E57               	movwf	(vfprintf@ap+1)^0,c
   753  001C70  ECBC  F00D         	call	_vfprintf	;wreg free
   754  001C74  5066               	movf	(sprintf@f+2)^0,w,c
   755  001C76  245A               	addwf	sprintf@s^0,w,c
   756  001C78  6ED9               	movwf	fsr2l,c
   757  001C7A  5067               	movf	(sprintf@f+3)^0,w,c
   758  001C7C  205B               	addwfc	(sprintf@s+1)^0,w,c
   759  001C7E  6EDA               	movwf	fsr2h,c
   760  001C80  0E00               	movlw	0
   761  001C82  6EDF               	movwf	indf2,c
   762  001C84  0012               	return		;funcret
   763  001C86                     __end_of_sprintf:
   764                           	callstack 0
   765                           
   766 ;; *************** function _vfprintf *****************
   767 ;; Defined at:
   768 ;;		line 1390 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;  fp              2   81[COMRAM] PTR struct _IO_FILE
   771 ;;		 -> sprintf@f(6), 
   772 ;;  fmt             2   83[COMRAM] PTR const unsigned char 
   773 ;;		 -> STR_2(3), 
   774 ;;  ap              2   85[COMRAM] PTR PTR void 
   775 ;;		 -> sprintf@ap(2), 
   776 ;; Auto vars:     Size  Location     Type
   777 ;;  cfmt            2   87[COMRAM] PTR unsigned char 
   778 ;;		 -> STR_2(3), 
   779 ;; Return value:  Size  Location     Type
   780 ;;                  2   81[COMRAM] int 
   781 ;; Registers used:
   782 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   783 ;; Tracked objects:
   784 ;;		On entry : 0/0
   785 ;;		On exit  : 0/0
   786 ;;		Unchanged: 0/0
   787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   788 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   789 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   791 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   792 ;;Total ram usage:        8 bytes
   793 ;; Hardware stack levels used:    1
   794 ;; Hardware stack levels required when called:    7
   795 ;; This function calls:
   796 ;;		_vfpfcnvrt
   797 ;; This function is called by:
   798 ;;		_sprintf
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text2
   803  001B78                     __ptext2:
   804                           	callstack 0
   805  001B78                     _vfprintf:
   806                           	callstack 22
   807  001B78                     
   808                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1390: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1
      +                          391: {;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1393:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1395:     cfmt = (char *)fmt;
   809  001B78  C054  F058         	movff	vfprintf@fmt,vfprintf@cfmt
   810  001B7C  C055  F059         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   811  001B80                     
   812                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1396:     nout = 0;
   813  001B80  0E00               	movlw	0
   814  001B82  0100               	movlb	0	; () banked
   815  001B84  6FA7               	movwf	(_nout+1)& (0+255),b
   816  001B86  0E00               	movlw	0
   817  001B88  6FA6               	movwf	_nout& (0+255),b
   818                           
   819                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1397:     while (*cfmt) {
   820  001B8A  EFDA  F00D         	goto	l2006
   821  001B8E                     l2004:
   822                           
   823                           ; BSR set to: 0
   824                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1398:         nout += vfpfcnv
      +                          rt(fp, &cfmt, ap);
   825  001B8E  C052  F042         	movff	vfprintf@fp,vfpfcnvrt@fp
   826  001B92  C053  F043         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   827  001B96  0E58               	movlw	low vfprintf@cfmt
   828  001B98  6E44               	movwf	vfpfcnvrt@fmt^0,c
   829  001B9A  0E00               	movlw	high vfprintf@cfmt
   830  001B9C  6E45               	movwf	(vfpfcnvrt@fmt+1)^0,c
   831  001B9E  C056  F046         	movff	vfprintf@ap,vfpfcnvrt@ap
   832  001BA2  C057  F047         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   833  001BA6  EC76  F009         	call	_vfpfcnvrt	;wreg free
   834  001BAA  5042               	movf	?_vfpfcnvrt^0,w,c
   835  001BAC  0100               	movlb	0	; () banked
   836  001BAE  27A6               	addwf	_nout& (0+255),f,b
   837  001BB0  5043               	movf	(?_vfpfcnvrt+1)^0,w,c
   838  001BB2  23A7               	addwfc	(_nout+1)& (0+255),f,b
   839  001BB4                     l2006:
   840                           
   841                           ; BSR set to: 0
   842                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1397:     while (*cfmt) {
   843  001BB4  C058  FFF6         	movff	vfprintf@cfmt,tblptrl
   844  001BB8  C059  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   845  001BBC                     	if	0	;tblptru may be non-zero
   846  001BBC                     	endif
   847  001BBC                     	if	0	;tblptru may be non-zero
   848  001BBC                     	endif
   849  001BBC  0008               	tblrd		*
   850  001BBE  50F5               	movf	tablat,w,c
   851  001BC0  0900               	iorlw	0
   852  001BC2  A4D8               	btfss	status,2,c
   853  001BC4  EFE6  F00D         	goto	u1601
   854  001BC8  EFE8  F00D         	goto	u1600
   855  001BCC                     u1601:
   856  001BCC  EFC7  F00D         	goto	l2004
   857  001BD0                     u1600:
   858  001BD0                     
   859                           ; BSR set to: 0
   860                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1400:     return nout;
   861  001BD0  C0A6  F052         	movff	_nout,?_vfprintf
   862  001BD4  C0A7  F053         	movff	_nout+1,?_vfprintf+1
   863  001BD8                     
   864                           ; BSR set to: 0
   865  001BD8  0012               	return		;funcret
   866  001BDA                     __end_of_vfprintf:
   867                           	callstack 0
   868                           
   869 ;; *************** function _vfpfcnvrt *****************
   870 ;; Defined at:
   871 ;;		line 692 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;  fp              2   65[COMRAM] PTR struct _IO_FILE
   874 ;;		 -> sprintf@f(6), 
   875 ;;  fmt             2   67[COMRAM] PTR PTR unsigned char 
   876 ;;		 -> vfprintf@cfmt(2), 
   877 ;;  ap              2   69[COMRAM] PTR PTR void 
   878 ;;		 -> sprintf@ap(2), 
   879 ;; Auto vars:     Size  Location     Type
   880 ;;  ll              8   73[COMRAM] long long 
   881 ;;  llu             8    0        unsigned long long 
   882 ;;  f               4    0        unsigned long long 
   883 ;;  vp              3    0        PTR void 
   884 ;;  ct              3    0        unsigned char [3]
   885 ;;  cp              3    0        PTR unsigned char 
   886 ;;  i               2    0        int 
   887 ;;  done            2    0        int 
   888 ;;  c               1    0        unsigned char 
   889 ;; Return value:  Size  Location     Type
   890 ;;                  2   65[COMRAM] int 
   891 ;; Registers used:
   892 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   898 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   899 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   900 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   901 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   902 ;;Total ram usage:       16 bytes
   903 ;; Hardware stack levels used:    1
   904 ;; Hardware stack levels required when called:    6
   905 ;; This function calls:
   906 ;;		_dtoa
   907 ;;		_fputc
   908 ;; This function is called by:
   909 ;;		_vfprintf
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           	psect	text3
   914  0012EC                     __ptext3:
   915                           	callstack 0
   916  0012EC                     _vfpfcnvrt:
   917                           	callstack 22
   918  0012EC                     
   919                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 692: static int vfpfcnvrt(FIL
      +                          E *fp, char *fmt[], va_list ap);/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c
      +                          : 693: {;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 694:     char c, *cp,
      +                           ct[3];;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 695:     int done, i;;
      +                          /opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 696:     long long ll;;/opt/mi
      +                          crochip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 697:     unsigned long long llu;
   920  0012EC  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   921  0012F0  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   922  0012F4  CFDE FFF6          	movff	postinc2,tblptrl
   923  0012F8  CFDD FFF7          	movff	postdec2,tblptrh
   924  0012FC                     	if	0	;tblptru may be non-zero
   925  0012FC                     	endif
   926  0012FC                     	if	0	;tblptru may be non-zero
   927  0012FC                     	endif
   928  0012FC  0008               	tblrd		*
   929  0012FE  50F5               	movf	tablat,w,c
   930  001300  0A25               	xorlw	37
   931  001302  A4D8               	btfss	status,2,c
   932  001304  EF86  F009         	goto	u1561
   933  001308  EF88  F009         	goto	u1560
   934  00130C                     u1561:
   935  00130C  EF33  F00A         	goto	l1966
   936  001310                     u1560:
   937  001310                     
   938                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 703:         ++*fmt;
   939  001310  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   940  001314  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   941  001318  2ADE               	incf	postinc2,f,c
   942  00131A  0E00               	movlw	0
   943  00131C  22DD               	addwfc	postdec2,f,c
   944  00131E                     
   945                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 705:         flags = width = 
      +                          0;
   946  00131E  0E00               	movlw	0
   947  001320  6E6B               	movwf	(_width+1)^0,c
   948  001322  0E00               	movlw	0
   949  001324  6E6A               	movwf	_width^0,c
   950  001326  C06A  F06E         	movff	_width,_flags
   951  00132A  C06B  F06F         	movff	_width+1,_flags+1
   952  00132E                     
   953                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 706:         prec = -1;
   954  00132E  686C               	setf	_prec^0,c
   955  001330  686D               	setf	(_prec+1)^0,c
   956  001332                     
   957                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 847:         if ((*fmt[0] == 
      +                          'd') || (*fmt[0] == 'i')) {
   958  001332  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   959  001336  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   960  00133A  CFDE FFF6          	movff	postinc2,tblptrl
   961  00133E  CFDD FFF7          	movff	postdec2,tblptrh
   962  001342                     	if	0	;tblptru may be non-zero
   963  001342                     	endif
   964  001342                     	if	0	;tblptru may be non-zero
   965  001342                     	endif
   966  001342  0008               	tblrd		*
   967  001344  50F5               	movf	tablat,w,c
   968  001346  0A64               	xorlw	100
   969  001348  B4D8               	btfsc	status,2,c
   970  00134A  EFA9  F009         	goto	u1571
   971  00134E  EFAB  F009         	goto	u1570
   972  001352                     u1571:
   973  001352  EFBD  F009         	goto	l1944
   974  001356                     u1570:
   975  001356  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   976  00135A  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   977  00135E  CFDE FFF6          	movff	postinc2,tblptrl
   978  001362  CFDD FFF7          	movff	postdec2,tblptrh
   979  001366                     	if	0	;tblptru may be non-zero
   980  001366                     	endif
   981  001366                     	if	0	;tblptru may be non-zero
   982  001366                     	endif
   983  001366  0008               	tblrd		*
   984  001368  50F5               	movf	tablat,w,c
   985  00136A  0A69               	xorlw	105
   986  00136C  A4D8               	btfss	status,2,c
   987  00136E  EFBB  F009         	goto	u1581
   988  001372  EFBD  F009         	goto	u1580
   989  001376                     u1581:
   990  001376  EFFD  F009         	goto	l1950
   991  00137A                     u1580:
   992  00137A                     l1944:
   993                           
   994                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 849:             ++*fmt;
   995  00137A  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   996  00137E  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   997  001382  2ADE               	incf	postinc2,f,c
   998  001384  0E00               	movlw	0
   999  001386  22DD               	addwfc	postdec2,f,c
  1000                           
  1001                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 850:             ll = (long l
      +                          ong)(*(int *)__va_arg(*(int **)ap, (int)0));
  1002  001388  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1003  00138C  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1004  001390  CFDF F048          	movff	indf2,??_vfpfcnvrt
  1005  001394  0E02               	movlw	2
  1006  001396  26DE               	addwf	postinc2,f,c
  1007  001398  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  1008  00139C  0E00               	movlw	0
  1009  00139E  22DD               	addwfc	postdec2,f,c
  1010  0013A0  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1011  0013A4  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1012  0013A8  CFDE F04A          	movff	postinc2,vfpfcnvrt@ll
  1013  0013AC  CFDD F04B          	movff	postdec2,vfpfcnvrt@ll+1
  1014  0013B0  0E00               	movlw	0
  1015  0013B2  BE4B               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1016  0013B4  0EFF               	movlw	-1
  1017  0013B6  6E4C               	movwf	(vfpfcnvrt@ll+2)^0,c
  1018  0013B8  6E4D               	movwf	(vfpfcnvrt@ll+3)^0,c
  1019  0013BA  6E4E               	movwf	(vfpfcnvrt@ll+4)^0,c
  1020  0013BC  6E4F               	movwf	(vfpfcnvrt@ll+5)^0,c
  1021  0013BE  6E50               	movwf	(vfpfcnvrt@ll+6)^0,c
  1022  0013C0  6E51               	movwf	(vfpfcnvrt@ll+7)^0,c
  1023  0013C2                     
  1024                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 852:             return dtoa(
      +                          fp, ll);
  1025  0013C2  C042  F01E         	movff	vfpfcnvrt@fp,dtoa@fp
  1026  0013C6  C043  F01F         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1027  0013CA  C04A  F020         	movff	vfpfcnvrt@ll,dtoa@d
  1028  0013CE  C04B  F021         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1029  0013D2  C04C  F022         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1030  0013D6  C04D  F023         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1031  0013DA  C04E  F024         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1032  0013DE  C04F  F025         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1033  0013E2  C050  F026         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1034  0013E6  C051  F027         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1035  0013EA  EC07  F008         	call	_dtoa	;wreg free
  1036  0013EE  C01E  F042         	movff	?_dtoa,?_vfpfcnvrt
  1037  0013F2  C01F  F043         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1038  0013F6  EF4E  F00A         	goto	l847
  1039  0013FA                     l1950:
  1040                           
  1041                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1372:         if ((*fmt)[0] =
      +                          = '%') {
  1042  0013FA  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1043  0013FE  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1044  001402  CFDE FFF6          	movff	postinc2,tblptrl
  1045  001406  CFDD FFF7          	movff	postdec2,tblptrh
  1046  00140A                     	if	0	;tblptru may be non-zero
  1047  00140A                     	endif
  1048  00140A                     	if	0	;tblptru may be non-zero
  1049  00140A                     	endif
  1050  00140A  0008               	tblrd		*
  1051  00140C  50F5               	movf	tablat,w,c
  1052  00140E  0A25               	xorlw	37
  1053  001410  A4D8               	btfss	status,2,c
  1054  001412  EF0D  F00A         	goto	u1591
  1055  001416  EF0F  F00A         	goto	u1590
  1056  00141A                     u1591:
  1057  00141A  EF26  F00A         	goto	l1960
  1058  00141E                     u1590:
  1059  00141E                     
  1060                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1373:             ++*fmt;
  1061  00141E  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1062  001422  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1063  001426  2ADE               	incf	postinc2,f,c
  1064  001428  0E00               	movlw	0
  1065  00142A  22DD               	addwfc	postdec2,f,c
  1066  00142C                     
  1067                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1374:             fputc((int)
      +                          '%', fp);
  1068  00142C  0E00               	movlw	0
  1069  00142E  6E04               	movwf	(fputc@c+1)^0,c
  1070  001430  0E25               	movlw	37
  1071  001432  6E03               	movwf	fputc@c^0,c
  1072  001434  C042  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1073  001438  C043  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1074  00143C  ECC5  F00B         	call	_fputc	;wreg free
  1075  001440                     l1956:
  1076                           
  1077                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1375:             return 1;
  1078  001440  0E00               	movlw	0
  1079  001442  6E43               	movwf	(?_vfpfcnvrt+1)^0,c
  1080  001444  0E01               	movlw	1
  1081  001446  6E42               	movwf	?_vfpfcnvrt^0,c
  1082  001448  EF4E  F00A         	goto	l847
  1083  00144C                     l1960:
  1084                           
  1085                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1379:         ++*fmt;
  1086  00144C  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1087  001450  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1088  001454  2ADE               	incf	postinc2,f,c
  1089  001456  0E00               	movlw	0
  1090  001458  22DD               	addwfc	postdec2,f,c
  1091  00145A                     
  1092                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1380:         return 0;
  1093  00145A  0E00               	movlw	0
  1094  00145C  6E43               	movwf	(?_vfpfcnvrt+1)^0,c
  1095  00145E  0E00               	movlw	0
  1096  001460  6E42               	movwf	?_vfpfcnvrt^0,c
  1097  001462  EF4E  F00A         	goto	l847
  1098  001466                     l1966:
  1099                           
  1100                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1384:     fputc((int)(*fmt)[0
      +                          ], fp);
  1101  001466  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1102  00146A  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1103  00146E  CFDE FFF6          	movff	postinc2,tblptrl
  1104  001472  CFDD FFF7          	movff	postdec2,tblptrh
  1105  001476                     	if	0	;tblptru may be non-zero
  1106  001476                     	endif
  1107  001476                     	if	0	;tblptru may be non-zero
  1108  001476                     	endif
  1109  001476  0008               	tblrd		*
  1110  001478  50F5               	movf	tablat,w,c
  1111  00147A  6E03               	movwf	fputc@c^0,c
  1112  00147C  6A04               	clrf	(fputc@c+1)^0,c
  1113  00147E  C042  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1114  001482  C043  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1115  001486  ECC5  F00B         	call	_fputc	;wreg free
  1116  00148A                     
  1117                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 1385:     ++*fmt;
  1118  00148A  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1119  00148E  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1120  001492  2ADE               	incf	postinc2,f,c
  1121  001494  0E00               	movlw	0
  1122  001496  22DD               	addwfc	postdec2,f,c
  1123  001498  EF20  F00A         	goto	l1956
  1124  00149C                     l847:
  1125  00149C  0012               	return		;funcret
  1126  00149E                     __end_of_vfpfcnvrt:
  1127                           	callstack 0
  1128                           
  1129 ;; *************** function _dtoa *****************
  1130 ;; Defined at:
  1131 ;;		line 287 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;  fp              2   29[COMRAM] PTR struct _IO_FILE
  1134 ;;		 -> sprintf@f(6), 
  1135 ;;  d               8   31[COMRAM] long long 
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;  n               8   55[COMRAM] long long 
  1138 ;;  i               2   63[COMRAM] int 
  1139 ;;  s               2   53[COMRAM] int 
  1140 ;;  w               2   51[COMRAM] int 
  1141 ;;  p               2   49[COMRAM] int 
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  2   29[COMRAM] int 
  1144 ;; Registers used:
  1145 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1151 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1152 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1153 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1154 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1155 ;;Total ram usage:       36 bytes
  1156 ;; Hardware stack levels used:    1
  1157 ;; Hardware stack levels required when called:    5
  1158 ;; This function calls:
  1159 ;;		___aodiv
  1160 ;;		___aomod
  1161 ;;		_abs
  1162 ;;		_pad
  1163 ;; This function is called by:
  1164 ;;		_vfpfcnvrt
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text4
  1169  00100E                     __ptext4:
  1170                           	callstack 0
  1171  00100E                     _dtoa:
  1172                           	callstack 22
  1173  00100E                     
  1174                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 287: static int dtoa(FILE *fp
      +                          , long long d);/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 288: {;/opt/mic
      +                          rochip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 289:     int i, p, s, w;;/opt/microchi
      +                          p/xc8/v2.30/pic/sources/c99/common/doprnt.c: 290:     long long n;;/opt/microchip/xc8/v2
      +                          .30/pic/sources/c99/common/doprnt.c: 293:     n = d;
  1175  00100E  C020  F038         	movff	dtoa@d,dtoa@n
  1176  001012  C021  F039         	movff	dtoa@d+1,dtoa@n+1
  1177  001016  C022  F03A         	movff	dtoa@d+2,dtoa@n+2
  1178  00101A  C023  F03B         	movff	dtoa@d+3,dtoa@n+3
  1179  00101E  C024  F03C         	movff	dtoa@d+4,dtoa@n+4
  1180  001022  C025  F03D         	movff	dtoa@d+5,dtoa@n+5
  1181  001026  C026  F03E         	movff	dtoa@d+6,dtoa@n+6
  1182  00102A  C027  F03F         	movff	dtoa@d+7,dtoa@n+7
  1183  00102E                     
  1184                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 294:     s = n < 0 ? 1 : 0;
  1185  00102E  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  1186  001030  EF1C  F008         	goto	u1411
  1187  001034  EF1F  F008         	goto	u1410
  1188  001038                     u1411:
  1189  001038  0E01               	movlw	1
  1190  00103A  EF20  F008         	goto	u1420
  1191  00103E                     u1410:
  1192  00103E  0E00               	movlw	0
  1193  001040                     u1420:
  1194  001040  6E36               	movwf	dtoa@s^0,c
  1195  001042  6A37               	clrf	(dtoa@s+1)^0,c
  1196                           
  1197                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 295:     if (s) {
  1198  001044  5036               	movf	dtoa@s^0,w,c
  1199  001046  1037               	iorwf	(dtoa@s+1)^0,w,c
  1200  001048  B4D8               	btfsc	status,2,c
  1201  00104A  EF29  F008         	goto	u1431
  1202  00104E  EF2B  F008         	goto	u1430
  1203  001052                     u1431:
  1204  001052  EF3B  F008         	goto	l1876
  1205  001056                     u1430:
  1206  001056                     
  1207                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 296:         n = -n;
  1208  001056  1E3F               	comf	(dtoa@n+7)^0,f,c
  1209  001058  1E3E               	comf	(dtoa@n+6)^0,f,c
  1210  00105A  1E3D               	comf	(dtoa@n+5)^0,f,c
  1211  00105C  1E3C               	comf	(dtoa@n+4)^0,f,c
  1212  00105E  1E3B               	comf	(dtoa@n+3)^0,f,c
  1213  001060  1E3A               	comf	(dtoa@n+2)^0,f,c
  1214  001062  1E39               	comf	(dtoa@n+1)^0,f,c
  1215  001064  6C38               	negf	dtoa@n^0,c
  1216  001066  0E00               	movlw	0
  1217  001068  2239               	addwfc	(dtoa@n+1)^0,f,c
  1218  00106A  223A               	addwfc	(dtoa@n+2)^0,f,c
  1219  00106C  223B               	addwfc	(dtoa@n+3)^0,f,c
  1220  00106E  223C               	addwfc	(dtoa@n+4)^0,f,c
  1221  001070  223D               	addwfc	(dtoa@n+5)^0,f,c
  1222  001072  223E               	addwfc	(dtoa@n+6)^0,f,c
  1223  001074  223F               	addwfc	(dtoa@n+7)^0,f,c
  1224  001076                     l1876:
  1225                           
  1226                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 300:     if (!(prec < 0)) {
  1227  001076  BE6D               	btfsc	(_prec+1)^0,7,c
  1228  001078  EF40  F008         	goto	u1441
  1229  00107C  EF42  F008         	goto	u1440
  1230  001080                     u1441:
  1231  001080  EF43  F008         	goto	l1880
  1232  001084                     u1440:
  1233  001084                     
  1234                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 301:         flags &= ~(1 << 
      +                          1);
  1235  001084  926E               	bcf	_flags^0,1,c
  1236  001086                     l1880:
  1237                           
  1238                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 303:     p = (0 < prec) ? pre
      +                          c : 1;
  1239  001086  BE6D               	btfsc	(_prec+1)^0,7,c
  1240  001088  EF50  F008         	goto	u1450
  1241  00108C  506D               	movf	(_prec+1)^0,w,c
  1242  00108E  E106               	bnz	u1451
  1243  001090  046C               	decf	_prec^0,w,c
  1244  001092  B0D8               	btfsc	status,0,c
  1245  001094  EF4E  F008         	goto	u1451
  1246  001098  EF50  F008         	goto	u1450
  1247  00109C                     u1451:
  1248  00109C  EF56  F008         	goto	l820
  1249  0010A0                     u1450:
  1250  0010A0  0E00               	movlw	0
  1251  0010A2  6E33               	movwf	(dtoa@p+1)^0,c
  1252  0010A4  0E01               	movlw	1
  1253  0010A6  6E32               	movwf	dtoa@p^0,c
  1254  0010A8  EF5A  F008         	goto	l822
  1255  0010AC                     l820:
  1256  0010AC  C06C  F032         	movff	_prec,dtoa@p
  1257  0010B0  C06D  F033         	movff	_prec+1,dtoa@p+1
  1258  0010B4                     l822:
  1259                           
  1260                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 304:     w = width;
  1261  0010B4  C06A  F034         	movff	_width,dtoa@w
  1262  0010B8  C06B  F035         	movff	_width+1,dtoa@w+1
  1263  0010BC                     
  1264                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 305:     if (s || (flags & (1
      +                           << 2))) {
  1265  0010BC  5036               	movf	dtoa@s^0,w,c
  1266  0010BE  1037               	iorwf	(dtoa@s+1)^0,w,c
  1267  0010C0  A4D8               	btfss	status,2,c
  1268  0010C2  EF65  F008         	goto	u1461
  1269  0010C6  EF67  F008         	goto	u1460
  1270  0010CA                     u1461:
  1271  0010CA  EF6E  F008         	goto	l1888
  1272  0010CE                     u1460:
  1273  0010CE  A46E               	btfss	_flags^0,2,c
  1274  0010D0  EF6C  F008         	goto	u1471
  1275  0010D4  EF6E  F008         	goto	u1470
  1276  0010D8                     u1471:
  1277  0010D8  EF71  F008         	goto	l1890
  1278  0010DC                     u1470:
  1279  0010DC                     l1888:
  1280                           
  1281                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 306:         --w;
  1282  0010DC  0634               	decf	dtoa@w^0,f,c
  1283  0010DE  A0D8               	btfss	status,0,c
  1284  0010E0  0635               	decf	(dtoa@w+1)^0,f,c
  1285  0010E2                     l1890:
  1286                           
  1287                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 310:     i = sizeof(dbuf) - 1
      +                          ;
  1288  0010E2  0E00               	movlw	0
  1289  0010E4  6E41               	movwf	(dtoa@i+1)^0,c
  1290  0010E6  0E1F               	movlw	31
  1291  0010E8  6E40               	movwf	dtoa@i^0,c
  1292  0010EA                     
  1293                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 311:     dbuf[i] = '\0';
  1294  0010EA  0E00               	movlw	0
  1295  0010EC  0100               	movlb	0	; () banked
  1296  0010EE  6FC7               	movwf	(_dbuf+31)& (0+255),b
  1297                           
  1298                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 312:     while (!(i < 1) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1299  0010F0  EFF6  F008         	goto	l1904
  1300  0010F4                     l1894:
  1301                           
  1302                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 313:         --i;
  1303  0010F4  0640               	decf	dtoa@i^0,f,c
  1304  0010F6  A0D8               	btfss	status,0,c
  1305  0010F8  0641               	decf	(dtoa@i+1)^0,f,c
  1306  0010FA                     
  1307                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 314:         dbuf[i] = (char)
      +                          ((int)'0' + abs(n % 10));
  1308  0010FA  0EA8               	movlw	low _dbuf
  1309  0010FC  2440               	addwf	dtoa@i^0,w,c
  1310  0010FE  6ED9               	movwf	fsr2l,c
  1311  001100  0E00               	movlw	high _dbuf
  1312  001102  2041               	addwfc	(dtoa@i+1)^0,w,c
  1313  001104  6EDA               	movwf	fsr2h,c
  1314  001106  C038  F003         	movff	dtoa@n,___aomod@dividend
  1315  00110A  C039  F004         	movff	dtoa@n+1,___aomod@dividend+1
  1316  00110E  C03A  F005         	movff	dtoa@n+2,___aomod@dividend+2
  1317  001112  C03B  F006         	movff	dtoa@n+3,___aomod@dividend+3
  1318  001116  C03C  F007         	movff	dtoa@n+4,___aomod@dividend+4
  1319  00111A  C03D  F008         	movff	dtoa@n+5,___aomod@dividend+5
  1320  00111E  C03E  F009         	movff	dtoa@n+6,___aomod@dividend+6
  1321  001122  C03F  F00A         	movff	dtoa@n+7,___aomod@dividend+7
  1322  001126  0E0A               	movlw	10
  1323  001128  6E0B               	movwf	___aomod@divisor^0,c
  1324  00112A  0E00               	movlw	0
  1325  00112C  6E0C               	movwf	(___aomod@divisor+1)^0,c
  1326  00112E  0E00               	movlw	0
  1327  001130  6E0D               	movwf	(___aomod@divisor+2)^0,c
  1328  001132  0E00               	movlw	0
  1329  001134  6E0E               	movwf	(___aomod@divisor+3)^0,c
  1330  001136  0E00               	movlw	0
  1331  001138  6E0F               	movwf	(___aomod@divisor+4)^0,c
  1332  00113A  0E00               	movlw	0
  1333  00113C  6E10               	movwf	(___aomod@divisor+5)^0,c
  1334  00113E  0E00               	movlw	0
  1335  001140  6E11               	movwf	(___aomod@divisor+6)^0,c
  1336  001142  0E00               	movlw	0
  1337  001144  6E12               	movwf	(___aomod@divisor+7)^0,c
  1338  001146  EC13  F00B         	call	___aomod	;wreg free
  1339  00114A  C003  F028         	movff	?___aomod,??_dtoa
  1340  00114E  C004  F029         	movff	?___aomod+1,??_dtoa+1
  1341  001152  C005  F02A         	movff	?___aomod+2,??_dtoa+2
  1342  001156  C006  F02B         	movff	?___aomod+3,??_dtoa+3
  1343  00115A  C007  F02C         	movff	?___aomod+4,??_dtoa+4
  1344  00115E  C008  F02D         	movff	?___aomod+5,??_dtoa+5
  1345  001162  C009  F02E         	movff	?___aomod+6,??_dtoa+6
  1346  001166  C00A  F02F         	movff	?___aomod+7,??_dtoa+7
  1347  00116A  C028  F015         	movff	??_dtoa,abs@a
  1348  00116E  C02A  F016         	movff	??_dtoa+2,abs@a+1
  1349  001172  EC87  F00E         	call	_abs	;wreg free
  1350  001176  5015               	movf	?_abs^0,w,c
  1351  001178  0F30               	addlw	48
  1352  00117A  6EDF               	movwf	indf2,c
  1353  00117C                     
  1354                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 315:         --p;
  1355  00117C  0632               	decf	dtoa@p^0,f,c
  1356  00117E  A0D8               	btfss	status,0,c
  1357  001180  0633               	decf	(dtoa@p+1)^0,f,c
  1358  001182                     
  1359                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 316:         --w;
  1360  001182  0634               	decf	dtoa@w^0,f,c
  1361  001184  A0D8               	btfss	status,0,c
  1362  001186  0635               	decf	(dtoa@w+1)^0,f,c
  1363  001188                     
  1364                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 317:         n = n / 10;
  1365  001188  C038  F003         	movff	dtoa@n,___aodiv@dividend
  1366  00118C  C039  F004         	movff	dtoa@n+1,___aodiv@dividend+1
  1367  001190  C03A  F005         	movff	dtoa@n+2,___aodiv@dividend+2
  1368  001194  C03B  F006         	movff	dtoa@n+3,___aodiv@dividend+3
  1369  001198  C03C  F007         	movff	dtoa@n+4,___aodiv@dividend+4
  1370  00119C  C03D  F008         	movff	dtoa@n+5,___aodiv@dividend+5
  1371  0011A0  C03E  F009         	movff	dtoa@n+6,___aodiv@dividend+6
  1372  0011A4  C03F  F00A         	movff	dtoa@n+7,___aodiv@dividend+7
  1373  0011A8  0E0A               	movlw	10
  1374  0011AA  6E0B               	movwf	___aodiv@divisor^0,c
  1375  0011AC  0E00               	movlw	0
  1376  0011AE  6E0C               	movwf	(___aodiv@divisor+1)^0,c
  1377  0011B0  0E00               	movlw	0
  1378  0011B2  6E0D               	movwf	(___aodiv@divisor+2)^0,c
  1379  0011B4  0E00               	movlw	0
  1380  0011B6  6E0E               	movwf	(___aodiv@divisor+3)^0,c
  1381  0011B8  0E00               	movlw	0
  1382  0011BA  6E0F               	movwf	(___aodiv@divisor+4)^0,c
  1383  0011BC  0E00               	movlw	0
  1384  0011BE  6E10               	movwf	(___aodiv@divisor+5)^0,c
  1385  0011C0  0E00               	movlw	0
  1386  0011C2  6E11               	movwf	(___aodiv@divisor+6)^0,c
  1387  0011C4  0E00               	movlw	0
  1388  0011C6  6E12               	movwf	(___aodiv@divisor+7)^0,c
  1389  0011C8  EC4F  F00A         	call	___aodiv	;wreg free
  1390  0011CC  C003  F038         	movff	?___aodiv,dtoa@n
  1391  0011D0  C004  F039         	movff	?___aodiv+1,dtoa@n+1
  1392  0011D4  C005  F03A         	movff	?___aodiv+2,dtoa@n+2
  1393  0011D8  C006  F03B         	movff	?___aodiv+3,dtoa@n+3
  1394  0011DC  C007  F03C         	movff	?___aodiv+4,dtoa@n+4
  1395  0011E0  C008  F03D         	movff	?___aodiv+5,dtoa@n+5
  1396  0011E4  C009  F03E         	movff	?___aodiv+6,dtoa@n+6
  1397  0011E8  C00A  F03F         	movff	?___aodiv+7,dtoa@n+7
  1398  0011EC                     l1904:
  1399                           
  1400                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 312:     while (!(i < 1) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1401  0011EC  BE41               	btfsc	(dtoa@i+1)^0,7,c
  1402  0011EE  EF01  F009         	goto	u1481
  1403  0011F2  5041               	movf	(dtoa@i+1)^0,w,c
  1404  0011F4  E108               	bnz	u1480
  1405  0011F6  0440               	decf	dtoa@i^0,w,c
  1406  0011F8  A0D8               	btfss	status,0,c
  1407  0011FA  EF01  F009         	goto	u1481
  1408  0011FE  EF03  F009         	goto	u1480
  1409  001202                     u1481:
  1410  001202  EF33  F009         	goto	l1914
  1411  001206                     u1480:
  1412  001206  5038               	movf	dtoa@n^0,w,c
  1413  001208  1039               	iorwf	(dtoa@n+1)^0,w,c
  1414  00120A  103A               	iorwf	(dtoa@n+2)^0,w,c
  1415  00120C  103B               	iorwf	(dtoa@n+3)^0,w,c
  1416  00120E  103C               	iorwf	(dtoa@n+4)^0,w,c
  1417  001210  103D               	iorwf	(dtoa@n+5)^0,w,c
  1418  001212  103E               	iorwf	(dtoa@n+6)^0,w,c
  1419  001214  103F               	iorwf	(dtoa@n+7)^0,w,c
  1420  001216  A4D8               	btfss	status,2,c
  1421  001218  EF10  F009         	goto	u1491
  1422  00121C  EF12  F009         	goto	u1490
  1423  001220                     u1491:
  1424  001220  EF7A  F008         	goto	l1894
  1425  001224                     u1490:
  1426  001224  BE33               	btfsc	(dtoa@p+1)^0,7,c
  1427  001226  EF1F  F009         	goto	u1500
  1428  00122A  5033               	movf	(dtoa@p+1)^0,w,c
  1429  00122C  E106               	bnz	u1501
  1430  00122E  0432               	decf	dtoa@p^0,w,c
  1431  001230  B0D8               	btfsc	status,0,c
  1432  001232  EF1D  F009         	goto	u1501
  1433  001236  EF1F  F009         	goto	u1500
  1434  00123A                     u1501:
  1435  00123A  EF7A  F008         	goto	l1894
  1436  00123E                     u1500:
  1437  00123E  BE35               	btfsc	(dtoa@w+1)^0,7,c
  1438  001240  EF2A  F009         	goto	u1511
  1439  001244  5035               	movf	(dtoa@w+1)^0,w,c
  1440  001246  E108               	bnz	u1510
  1441  001248  0434               	decf	dtoa@w^0,w,c
  1442  00124A  A0D8               	btfss	status,0,c
  1443  00124C  EF2A  F009         	goto	u1511
  1444  001250  EF2C  F009         	goto	u1510
  1445  001254                     u1511:
  1446  001254  EF33  F009         	goto	l1914
  1447  001258                     u1510:
  1448  001258  B26E               	btfsc	_flags^0,1,c
  1449  00125A  EF31  F009         	goto	u1521
  1450  00125E  EF33  F009         	goto	u1520
  1451  001262                     u1521:
  1452  001262  EF7A  F008         	goto	l1894
  1453  001266                     u1520:
  1454  001266                     l1914:
  1455                           
  1456                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 321:     if (s || (flags & (1
      +                           << 2))) {
  1457  001266  5036               	movf	dtoa@s^0,w,c
  1458  001268  1037               	iorwf	(dtoa@s+1)^0,w,c
  1459  00126A  A4D8               	btfss	status,2,c
  1460  00126C  EF3A  F009         	goto	u1531
  1461  001270  EF3C  F009         	goto	u1530
  1462  001274                     u1531:
  1463  001274  EF43  F009         	goto	l1918
  1464  001278                     u1530:
  1465  001278  A46E               	btfss	_flags^0,2,c
  1466  00127A  EF41  F009         	goto	u1541
  1467  00127E  EF43  F009         	goto	u1540
  1468  001282                     u1541:
  1469  001282  EF61  F009         	goto	l1928
  1470  001286                     u1540:
  1471  001286                     l1918:
  1472                           
  1473                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 322:         --i;
  1474  001286  0640               	decf	dtoa@i^0,f,c
  1475  001288  A0D8               	btfss	status,0,c
  1476  00128A  0641               	decf	(dtoa@i+1)^0,f,c
  1477  00128C                     
  1478                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 323:         dbuf[i] = s ? '-
      +                          ' : '+';
  1479  00128C  5036               	movf	dtoa@s^0,w,c
  1480  00128E  1037               	iorwf	(dtoa@s+1)^0,w,c
  1481  001290  A4D8               	btfss	status,2,c
  1482  001292  EF4D  F009         	goto	u1551
  1483  001296  EF4F  F009         	goto	u1550
  1484  00129A                     u1551:
  1485  00129A  EF55  F009         	goto	l1924
  1486  00129E                     u1550:
  1487  00129E  0E00               	movlw	0
  1488  0012A0  6E31               	movwf	(_dtoa$1153+1)^0,c
  1489  0012A2  0E2B               	movlw	43
  1490  0012A4  6E30               	movwf	_dtoa$1153^0,c
  1491  0012A6  EF59  F009         	goto	l1926
  1492  0012AA                     l1924:
  1493  0012AA  0E00               	movlw	0
  1494  0012AC  6E31               	movwf	(_dtoa$1153+1)^0,c
  1495  0012AE  0E2D               	movlw	45
  1496  0012B0  6E30               	movwf	_dtoa$1153^0,c
  1497  0012B2                     l1926:
  1498  0012B2  0EA8               	movlw	low _dbuf
  1499  0012B4  2440               	addwf	dtoa@i^0,w,c
  1500  0012B6  6ED9               	movwf	fsr2l,c
  1501  0012B8  0E00               	movlw	high _dbuf
  1502  0012BA  2041               	addwfc	(dtoa@i+1)^0,w,c
  1503  0012BC  6EDA               	movwf	fsr2h,c
  1504  0012BE  C030  FFDF         	movff	_dtoa$1153,indf2
  1505  0012C2                     l1928:
  1506                           
  1507                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 327:     return pad(fp, &dbuf
      +                          [i], w);
  1508  0012C2  C01E  F013         	movff	dtoa@fp,pad@fp
  1509  0012C6  C01F  F014         	movff	dtoa@fp+1,pad@fp+1
  1510  0012CA  0EA8               	movlw	low _dbuf
  1511  0012CC  2440               	addwf	dtoa@i^0,w,c
  1512  0012CE  6E15               	movwf	pad@buf^0,c
  1513  0012D0  0E00               	movlw	high _dbuf
  1514  0012D2  2041               	addwfc	(dtoa@i+1)^0,w,c
  1515  0012D4  6E16               	movwf	(pad@buf+1)^0,c
  1516  0012D6  C034  F017         	movff	dtoa@w,pad@p
  1517  0012DA  C035  F018         	movff	dtoa@w+1,pad@p+1
  1518  0012DE  EC2A  F00C         	call	_pad	;wreg free
  1519  0012E2  C013  F01E         	movff	?_pad,?_dtoa
  1520  0012E6  C014  F01F         	movff	?_pad+1,?_dtoa+1
  1521  0012EA  0012               	return		;funcret
  1522  0012EC                     __end_of_dtoa:
  1523                           	callstack 0
  1524                           
  1525 ;; *************** function _pad *****************
  1526 ;; Defined at:
  1527 ;;		line 72 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
  1530 ;;		 -> sprintf@f(6), 
  1531 ;;  buf             2   20[COMRAM] PTR unsigned char 
  1532 ;;		 -> dbuf(32), 
  1533 ;;  p               2   22[COMRAM] int 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  w               2   27[COMRAM] int 
  1536 ;;  i               2   25[COMRAM] int 
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  2   18[COMRAM] int 
  1539 ;; Registers used:
  1540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1546 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1547 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1548 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1549 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1550 ;;Total ram usage:       11 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:    4
  1553 ;; This function calls:
  1554 ;;		_fputc
  1555 ;;		_fputs
  1556 ;;		_strlen
  1557 ;; This function is called by:
  1558 ;;		_dtoa
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           	psect	text5
  1563  001854                     __ptext5:
  1564                           	callstack 0
  1565  001854                     _pad:
  1566                           	callstack 22
  1567  001854                     
  1568                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 72: static int pad(FILE *fp, 
      +                          char *buf, int p);/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 73: {;/opt/m
      +                          icrochip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 74:     int i, w;;/opt/microchip/xc8
      +                          /v2.30/pic/sources/c99/common/doprnt.c: 77:     if (flags & (1 << 0)) {
  1569  001854  A06E               	btfss	_flags^0,0,c
  1570  001856  EF2F  F00C         	goto	u1361
  1571  00185A  EF31  F00C         	goto	u1360
  1572  00185E                     u1361:
  1573  00185E  EF3B  F00C         	goto	l1848
  1574  001862                     u1360:
  1575  001862                     
  1576                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 78:         fputs((const char
      +                           *)buf, fp);
  1577  001862  C015  F00C         	movff	pad@buf,fputs@s
  1578  001866  C016  F00D         	movff	pad@buf+1,fputs@s+1
  1579  00186A  C013  F00E         	movff	pad@fp,fputs@fp
  1580  00186E  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  1581  001872  EC43  F00E         	call	_fputs	;wreg free
  1582  001876                     l1848:
  1583                           
  1584                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) ? 0 : p;
  1585  001876  BE18               	btfsc	(pad@p+1)^0,7,c
  1586  001878  EF40  F00C         	goto	u1371
  1587  00187C  EF42  F00C         	goto	u1370
  1588  001880                     u1371:
  1589  001880  EF48  F00C         	goto	l1852
  1590  001884                     u1370:
  1591  001884  C017  F01C         	movff	pad@p,pad@w
  1592  001888  C018  F01D         	movff	pad@p+1,pad@w+1
  1593  00188C  EF4C  F00C         	goto	l809
  1594  001890                     l1852:
  1595  001890  0E00               	movlw	0
  1596  001892  6E1D               	movwf	(pad@w+1)^0,c
  1597  001894  0E00               	movlw	0
  1598  001896  6E1C               	movwf	pad@w^0,c
  1599  001898                     l809:
  1600                           
  1601                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  1602  001898  0E00               	movlw	0
  1603  00189A  6E1B               	movwf	(pad@i+1)^0,c
  1604  00189C  0E00               	movlw	0
  1605  00189E  6E1A               	movwf	pad@i^0,c
  1606                           
  1607                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
  1608  0018A0  EF5E  F00C         	goto	l1858
  1609  0018A4                     l1854:
  1610                           
  1611                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 85:         fputc(' ', fp);
  1612  0018A4  0E00               	movlw	0
  1613  0018A6  6E04               	movwf	(fputc@c+1)^0,c
  1614  0018A8  0E20               	movlw	32
  1615  0018AA  6E03               	movwf	fputc@c^0,c
  1616  0018AC  C013  F005         	movff	pad@fp,fputc@fp
  1617  0018B0  C014  F006         	movff	pad@fp+1,fputc@fp+1
  1618  0018B4  ECC5  F00B         	call	_fputc	;wreg free
  1619  0018B8                     
  1620                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 86:         ++i;
  1621  0018B8  4A1A               	infsnz	pad@i^0,f,c
  1622  0018BA  2A1B               	incf	(pad@i+1)^0,f,c
  1623  0018BC                     l1858:
  1624                           
  1625                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
  1626  0018BC  501C               	movf	pad@w^0,w,c
  1627  0018BE  5C1A               	subwf	pad@i^0,w,c
  1628  0018C0  501B               	movf	(pad@i+1)^0,w,c
  1629  0018C2  0A80               	xorlw	128
  1630  0018C4  6E19               	movwf	??_pad^0,c
  1631  0018C6  501D               	movf	(pad@w+1)^0,w,c
  1632  0018C8  0A80               	xorlw	128
  1633  0018CA  5819               	subwfb	??_pad^0,w,c
  1634  0018CC  A0D8               	btfss	status,0,c
  1635  0018CE  EF6B  F00C         	goto	u1381
  1636  0018D2  EF6D  F00C         	goto	u1380
  1637  0018D6                     u1381:
  1638  0018D6  EF52  F00C         	goto	l1854
  1639  0018DA                     u1380:
  1640  0018DA                     
  1641                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 90:     if (!(flags & (1 << 0
      +                          ))) {
  1642  0018DA  B06E               	btfsc	_flags^0,0,c
  1643  0018DC  EF72  F00C         	goto	u1391
  1644  0018E0  EF74  F00C         	goto	u1390
  1645  0018E4                     u1391:
  1646  0018E4  EF7E  F00C         	goto	l1862
  1647  0018E8                     u1390:
  1648  0018E8                     
  1649                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 91:         fputs((const char
      +                           *)buf, fp);
  1650  0018E8  C015  F00C         	movff	pad@buf,fputs@s
  1651  0018EC  C016  F00D         	movff	pad@buf+1,fputs@s+1
  1652  0018F0  C013  F00E         	movff	pad@fp,fputs@fp
  1653  0018F4  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  1654  0018F8  EC43  F00E         	call	_fputs	;wreg free
  1655  0018FC                     l1862:
  1656                           
  1657                           ;/opt/microchip/xc8/v2.30/pic/sources/c99/common/doprnt.c: 94:     return (int)(strlen(b
      +                          uf) + (size_t)w);
  1658  0018FC  C015  F003         	movff	pad@buf,strlen@s
  1659  001900  C016  F004         	movff	pad@buf+1,strlen@s+1
  1660  001904  ECC3  F00E         	call	_strlen	;wreg free
  1661  001908  501C               	movf	pad@w^0,w,c
  1662  00190A  2403               	addwf	?_strlen^0,w,c
  1663  00190C  6E13               	movwf	?_pad^0,c
  1664  00190E  501D               	movf	(pad@w+1)^0,w,c
  1665  001910  2004               	addwfc	(?_strlen+1)^0,w,c
  1666  001912  6E14               	movwf	(?_pad+1)^0,c
  1667  001914  0012               	return		;funcret
  1668  001916                     __end_of_pad:
  1669                           	callstack 0
  1670                           
  1671 ;; *************** function _strlen *****************
  1672 ;; Defined at:
  1673 ;;		line 5 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/strlen.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;  s               2    2[COMRAM] PTR const unsigned char 
  1676 ;;		 -> dbuf(32), 
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;  a               2    4[COMRAM] PTR const unsigned char 
  1679 ;;		 -> dbuf(32), 
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  2    2[COMRAM] unsigned int 
  1682 ;; Registers used:
  1683 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1689 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1690 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;Total ram usage:        4 bytes
  1694 ;; Hardware stack levels used:    1
  1695 ;; Hardware stack levels required when called:    1
  1696 ;; This function calls:
  1697 ;;		Nothing
  1698 ;; This function is called by:
  1699 ;;		_pad
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text6
  1704  001D86                     __ptext6:
  1705                           	callstack 0
  1706  001D86                     _strlen:
  1707                           	callstack 24
  1708  001D86  C003  F005         	movff	strlen@s,strlen@a
  1709  001D8A  C004  F006         	movff	strlen@s+1,strlen@a+1
  1710  001D8E  EFCB  F00E         	goto	l1758
  1711  001D92                     l1756:
  1712  001D92  4A03               	infsnz	strlen@s^0,f,c
  1713  001D94  2A04               	incf	(strlen@s+1)^0,f,c
  1714  001D96                     l1758:
  1715  001D96  C003  FFD9         	movff	strlen@s,fsr2l
  1716  001D9A  C004  FFDA         	movff	strlen@s+1,fsr2h
  1717  001D9E  50DF               	movf	indf2,w,c
  1718  001DA0  A4D8               	btfss	status,2,c
  1719  001DA2  EFD5  F00E         	goto	u1221
  1720  001DA6  EFD7  F00E         	goto	u1220
  1721  001DAA                     u1221:
  1722  001DAA  EFC9  F00E         	goto	l1756
  1723  001DAE                     u1220:
  1724  001DAE  5005               	movf	strlen@a^0,w,c
  1725  001DB0  5C03               	subwf	strlen@s^0,w,c
  1726  001DB2  6E03               	movwf	?_strlen^0,c
  1727  001DB4  5006               	movf	(strlen@a+1)^0,w,c
  1728  001DB6  5804               	subwfb	(strlen@s+1)^0,w,c
  1729  001DB8  6E04               	movwf	(?_strlen+1)^0,c
  1730  001DBA  0012               	return		;funcret
  1731  001DBC                     __end_of_strlen:
  1732                           	callstack 0
  1733                           
  1734 ;; *************** function _fputs *****************
  1735 ;; Defined at:
  1736 ;;		line 8 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/nf_fputs.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;  s               2   11[COMRAM] PTR const unsigned char 
  1739 ;;		 -> dbuf(32), 
  1740 ;;  fp              2   13[COMRAM] PTR struct _IO_FILE
  1741 ;;		 -> sprintf@f(6), 
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  i               2   16[COMRAM] int 
  1744 ;;  c               1   15[COMRAM] unsigned char 
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  2   11[COMRAM] int 
  1747 ;; Registers used:
  1748 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1754 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;Total ram usage:        7 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    3
  1761 ;; This function calls:
  1762 ;;		_fputc
  1763 ;; This function is called by:
  1764 ;;		_pad
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           	psect	text7
  1769  001C86                     __ptext7:
  1770                           	callstack 0
  1771  001C86                     _fputs:
  1772                           	callstack 22
  1773  001C86  0E00               	movlw	0
  1774  001C88  6E12               	movwf	(fputs@i+1)^0,c
  1775  001C8A  0E00               	movlw	0
  1776  001C8C  6E11               	movwf	fputs@i^0,c
  1777  001C8E  EF54  F00E         	goto	l1752
  1778  001C92                     l1748:
  1779  001C92  C010  F003         	movff	fputs@c,fputc@c
  1780  001C96  6A04               	clrf	(fputc@c+1)^0,c
  1781  001C98  C00E  F005         	movff	fputs@fp,fputc@fp
  1782  001C9C  C00F  F006         	movff	fputs@fp+1,fputc@fp+1
  1783  001CA0  ECC5  F00B         	call	_fputc	;wreg free
  1784  001CA4  4A11               	infsnz	fputs@i^0,f,c
  1785  001CA6  2A12               	incf	(fputs@i+1)^0,f,c
  1786  001CA8                     l1752:
  1787  001CA8  5011               	movf	fputs@i^0,w,c
  1788  001CAA  240C               	addwf	fputs@s^0,w,c
  1789  001CAC  6ED9               	movwf	fsr2l,c
  1790  001CAE  5012               	movf	(fputs@i+1)^0,w,c
  1791  001CB0  200D               	addwfc	(fputs@s+1)^0,w,c
  1792  001CB2  6EDA               	movwf	fsr2h,c
  1793  001CB4  50DF               	movf	indf2,w,c
  1794  001CB6  6E10               	movwf	fputs@c^0,c
  1795  001CB8  5010               	movf	fputs@c^0,w,c
  1796  001CBA  A4D8               	btfss	status,2,c
  1797  001CBC  EF62  F00E         	goto	u1211
  1798  001CC0  EF64  F00E         	goto	u1210
  1799  001CC4                     u1211:
  1800  001CC4  EF49  F00E         	goto	l1748
  1801  001CC8                     u1210:
  1802  001CC8  0012               	return		;funcret
  1803  001CCA                     __end_of_fputs:
  1804                           	callstack 0
  1805                           
  1806 ;; *************** function _fputc *****************
  1807 ;; Defined at:
  1808 ;;		line 8 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/nf_fputc.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  c               2    2[COMRAM] int 
  1811 ;;  fp              2    4[COMRAM] PTR struct _IO_FILE
  1812 ;;		 -> sprintf@f(6), 
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  2    2[COMRAM] int 
  1817 ;; Registers used:
  1818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1824 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;Total ram usage:        9 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    2
  1831 ;; This function calls:
  1832 ;;		_putch
  1833 ;; This function is called by:
  1834 ;;		_pad
  1835 ;;		_vfpfcnvrt
  1836 ;;		_fputs
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           	psect	text8
  1841  00178A                     __ptext8:
  1842                           	callstack 0
  1843  00178A                     _fputc:
  1844                           	callstack 25
  1845  00178A  5005               	movf	fputc@fp^0,w,c
  1846  00178C  1006               	iorwf	(fputc@fp+1)^0,w,c
  1847  00178E  B4D8               	btfsc	status,2,c
  1848  001790  EFCC  F00B         	goto	u1171
  1849  001794  EFCE  F00B         	goto	u1170
  1850  001798                     u1171:
  1851  001798  EFD7  F00B         	goto	l1736
  1852  00179C                     u1170:
  1853  00179C  5005               	movf	fputc@fp^0,w,c
  1854  00179E  1006               	iorwf	(fputc@fp+1)^0,w,c
  1855  0017A0  A4D8               	btfss	status,2,c
  1856  0017A2  EFD5  F00B         	goto	u1181
  1857  0017A6  EFD7  F00B         	goto	u1180
  1858  0017AA                     u1181:
  1859  0017AA  EFDC  F00B         	goto	l1738
  1860  0017AE                     u1180:
  1861  0017AE                     l1736:
  1862  0017AE  5003               	movf	fputc@c^0,w,c
  1863  0017B0  EC3F  F00F         	call	_putch
  1864  0017B4  EF29  F00C         	goto	l873
  1865  0017B8                     l1738:
  1866  0017B8  EE20 F004          	lfsr	2,4
  1867  0017BC  5005               	movf	fputc@fp^0,w,c
  1868  0017BE  26D9               	addwf	fsr2l,f,c
  1869  0017C0  5006               	movf	(fputc@fp+1)^0,w,c
  1870  0017C2  22DA               	addwfc	fsr2h,f,c
  1871  0017C4  50DE               	movf	postinc2,w,c
  1872  0017C6  10DE               	iorwf	postinc2,w,c
  1873  0017C8  B4D8               	btfsc	status,2,c
  1874  0017CA  EFE9  F00B         	goto	u1191
  1875  0017CE  EFEB  F00B         	goto	u1190
  1876  0017D2                     u1191:
  1877  0017D2  EF06  F00C         	goto	l1742
  1878  0017D6                     u1190:
  1879  0017D6  EE20 F004          	lfsr	2,4
  1880  0017DA  5005               	movf	fputc@fp^0,w,c
  1881  0017DC  26D9               	addwf	fsr2l,f,c
  1882  0017DE  5006               	movf	(fputc@fp+1)^0,w,c
  1883  0017E0  22DA               	addwfc	fsr2h,f,c
  1884  0017E2  EE10 F002          	lfsr	1,2
  1885  0017E6  5005               	movf	fputc@fp^0,w,c
  1886  0017E8  26E1               	addwf	fsr1l,f,c
  1887  0017EA  5006               	movf	(fputc@fp+1)^0,w,c
  1888  0017EC  22E2               	addwfc	fsr1h,f,c
  1889  0017EE  50DE               	movf	postinc2,w,c
  1890  0017F0  5CE6               	subwf	postinc1,w,c
  1891  0017F2  50E6               	movf	postinc1,w,c
  1892  0017F4  0A80               	xorlw	128
  1893  0017F6  6E0B               	movwf	(??_fputc+4)^0,c
  1894  0017F8  50DE               	movf	postinc2,w,c
  1895  0017FA  0A80               	xorlw	128
  1896  0017FC  580B               	subwfb	(??_fputc+4)^0,w,c
  1897  0017FE  B0D8               	btfsc	status,0,c
  1898  001800  EF04  F00C         	goto	u1201
  1899  001804  EF06  F00C         	goto	u1200
  1900  001808                     u1201:
  1901  001808  EF29  F00C         	goto	l873
  1902  00180C                     u1200:
  1903  00180C                     l1742:
  1904  00180C  EE20 F002          	lfsr	2,2
  1905  001810  5005               	movf	fputc@fp^0,w,c
  1906  001812  26D9               	addwf	fsr2l,f,c
  1907  001814  5006               	movf	(fputc@fp+1)^0,w,c
  1908  001816  22DA               	addwfc	fsr2h,f,c
  1909  001818  CFDE F007          	movff	postinc2,??_fputc
  1910  00181C  CFDD F008          	movff	postdec2,??_fputc+1
  1911  001820  C005  FFD9         	movff	fputc@fp,fsr2l
  1912  001824  C006  FFDA         	movff	fputc@fp+1,fsr2h
  1913  001828  CFDE F009          	movff	postinc2,??_fputc+2
  1914  00182C  CFDD F00A          	movff	postdec2,??_fputc+3
  1915  001830  5007               	movf	??_fputc^0,w,c
  1916  001832  2409               	addwf	(??_fputc+2)^0,w,c
  1917  001834  6ED9               	movwf	fsr2l,c
  1918  001836  5008               	movf	(??_fputc+1)^0,w,c
  1919  001838  200A               	addwfc	(??_fputc+3)^0,w,c
  1920  00183A  6EDA               	movwf	fsr2h,c
  1921  00183C  C003  FFDF         	movff	fputc@c,indf2
  1922  001840  EE20 F002          	lfsr	2,2
  1923  001844  5005               	movf	fputc@fp^0,w,c
  1924  001846  26D9               	addwf	fsr2l,f,c
  1925  001848  5006               	movf	(fputc@fp+1)^0,w,c
  1926  00184A  22DA               	addwfc	fsr2h,f,c
  1927  00184C  2ADE               	incf	postinc2,f,c
  1928  00184E  0E00               	movlw	0
  1929  001850  22DD               	addwfc	postdec2,f,c
  1930  001852                     l873:
  1931  001852  0012               	return		;funcret
  1932  001854                     __end_of_fputc:
  1933                           	callstack 0
  1934                           
  1935 ;; *************** function _putch *****************
  1936 ;; Defined at:
  1937 ;;		line 7 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/putch.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;  c               1    wreg     unsigned char 
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  c               1    0[COMRAM] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  1    wreg      void 
  1944 ;; Registers used:
  1945 ;;		wreg
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;Total ram usage:        0 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    1
  1958 ;; This function calls:
  1959 ;;		Nothing
  1960 ;; This function is called by:
  1961 ;;		_fputc
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text9
  1966  001E7E                     __ptext9:
  1967                           	callstack 0
  1968  001E7E                     _putch:
  1969                           	callstack 25
  1970  001E7E  0012               	return		;funcret
  1971  001E80                     __end_of_putch:
  1972                           	callstack 0
  1973                           
  1974 ;; *************** function _abs *****************
  1975 ;; Defined at:
  1976 ;;		line 1 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/abs.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;  a               2   20[COMRAM] int 
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;		None
  1981 ;; Return value:  Size  Location     Type
  1982 ;;                  2   20[COMRAM] int 
  1983 ;; Registers used:
  1984 ;;		wreg, status,2, status,0
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1990 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;Total ram usage:        4 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    1
  1997 ;; This function calls:
  1998 ;;		Nothing
  1999 ;; This function is called by:
  2000 ;;		_dtoa
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           	psect	text10
  2005  001D0E                     __ptext10:
  2006                           	callstack 0
  2007  001D0E                     _abs:
  2008                           	callstack 25
  2009  001D0E  BE16               	btfsc	(abs@a+1)^0,7,c
  2010  001D10  EF94  F00E         	goto	u1400
  2011  001D14  5016               	movf	(abs@a+1)^0,w,c
  2012  001D16  E106               	bnz	u1401
  2013  001D18  0415               	decf	abs@a^0,w,c
  2014  001D1A  B0D8               	btfsc	status,0,c
  2015  001D1C  EF92  F00E         	goto	u1401
  2016  001D20  EF94  F00E         	goto	u1400
  2017  001D24                     u1401:
  2018  001D24  EFA2  F00E         	goto	l858
  2019  001D28                     u1400:
  2020  001D28  C015  F017         	movff	abs@a,??_abs
  2021  001D2C  C016  F018         	movff	abs@a+1,??_abs+1
  2022  001D30  1E17               	comf	??_abs^0,f,c
  2023  001D32  1E18               	comf	(??_abs+1)^0,f,c
  2024  001D34  4A17               	infsnz	??_abs^0,f,c
  2025  001D36  2A18               	incf	(??_abs+1)^0,f,c
  2026  001D38  C017  F015         	movff	??_abs,?_abs
  2027  001D3C  C018  F016         	movff	??_abs+1,?_abs+1
  2028  001D40  EFA6  F00E         	goto	l861
  2029  001D44                     l858:
  2030  001D44  C015  F015         	movff	abs@a,?_abs
  2031  001D48  C016  F016         	movff	abs@a+1,?_abs+1
  2032  001D4C                     l861:
  2033  001D4C  0012               	return		;funcret
  2034  001D4E                     __end_of_abs:
  2035                           	callstack 0
  2036                           
  2037 ;; *************** function ___aomod *****************
  2038 ;; Defined at:
  2039 ;;		line 9 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/aomod.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;  dividend        8    2[COMRAM] long long 
  2042 ;;  divisor         8   10[COMRAM] long long 
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;  sign            1   19[COMRAM] unsigned char 
  2045 ;;  counter         1   18[COMRAM] unsigned char 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  8    2[COMRAM] long long 
  2048 ;; Registers used:
  2049 ;;		wreg, status,2, status,0
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2055 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2058 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2059 ;;Total ram usage:       18 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    1
  2062 ;; This function calls:
  2063 ;;		Nothing
  2064 ;; This function is called by:
  2065 ;;		_dtoa
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           	psect	text11
  2070  001626                     __ptext11:
  2071                           	callstack 0
  2072  001626                     ___aomod:
  2073                           	callstack 25
  2074  001626  0E00               	movlw	0
  2075  001628  6E14               	movwf	___aomod@sign^0,c
  2076  00162A  BE0A               	btfsc	(___aomod@dividend+7)^0,7,c
  2077  00162C  EF1C  F00B         	goto	u1300
  2078  001630  EF1A  F00B         	goto	u1301
  2079  001634                     u1301:
  2080  001634  EF2E  F00B         	goto	l1816
  2081  001638                     u1300:
  2082  001638  1E0A               	comf	(___aomod@dividend+7)^0,f,c
  2083  00163A  1E09               	comf	(___aomod@dividend+6)^0,f,c
  2084  00163C  1E08               	comf	(___aomod@dividend+5)^0,f,c
  2085  00163E  1E07               	comf	(___aomod@dividend+4)^0,f,c
  2086  001640  1E06               	comf	(___aomod@dividend+3)^0,f,c
  2087  001642  1E05               	comf	(___aomod@dividend+2)^0,f,c
  2088  001644  1E04               	comf	(___aomod@dividend+1)^0,f,c
  2089  001646  6C03               	negf	___aomod@dividend^0,c
  2090  001648  0E00               	movlw	0
  2091  00164A  2204               	addwfc	(___aomod@dividend+1)^0,f,c
  2092  00164C  2205               	addwfc	(___aomod@dividend+2)^0,f,c
  2093  00164E  2206               	addwfc	(___aomod@dividend+3)^0,f,c
  2094  001650  2207               	addwfc	(___aomod@dividend+4)^0,f,c
  2095  001652  2208               	addwfc	(___aomod@dividend+5)^0,f,c
  2096  001654  2209               	addwfc	(___aomod@dividend+6)^0,f,c
  2097  001656  220A               	addwfc	(___aomod@dividend+7)^0,f,c
  2098  001658  0E01               	movlw	1
  2099  00165A  6E14               	movwf	___aomod@sign^0,c
  2100  00165C                     l1816:
  2101  00165C  BE12               	btfsc	(___aomod@divisor+7)^0,7,c
  2102  00165E  EF35  F00B         	goto	u1310
  2103  001662  EF33  F00B         	goto	u1311
  2104  001666                     u1311:
  2105  001666  EF45  F00B         	goto	l1820
  2106  00166A                     u1310:
  2107  00166A  1E12               	comf	(___aomod@divisor+7)^0,f,c
  2108  00166C  1E11               	comf	(___aomod@divisor+6)^0,f,c
  2109  00166E  1E10               	comf	(___aomod@divisor+5)^0,f,c
  2110  001670  1E0F               	comf	(___aomod@divisor+4)^0,f,c
  2111  001672  1E0E               	comf	(___aomod@divisor+3)^0,f,c
  2112  001674  1E0D               	comf	(___aomod@divisor+2)^0,f,c
  2113  001676  1E0C               	comf	(___aomod@divisor+1)^0,f,c
  2114  001678  6C0B               	negf	___aomod@divisor^0,c
  2115  00167A  0E00               	movlw	0
  2116  00167C  220C               	addwfc	(___aomod@divisor+1)^0,f,c
  2117  00167E  220D               	addwfc	(___aomod@divisor+2)^0,f,c
  2118  001680  220E               	addwfc	(___aomod@divisor+3)^0,f,c
  2119  001682  220F               	addwfc	(___aomod@divisor+4)^0,f,c
  2120  001684  2210               	addwfc	(___aomod@divisor+5)^0,f,c
  2121  001686  2211               	addwfc	(___aomod@divisor+6)^0,f,c
  2122  001688  2212               	addwfc	(___aomod@divisor+7)^0,f,c
  2123  00168A                     l1820:
  2124  00168A  500B               	movf	___aomod@divisor^0,w,c
  2125  00168C  100C               	iorwf	(___aomod@divisor+1)^0,w,c
  2126  00168E  100D               	iorwf	(___aomod@divisor+2)^0,w,c
  2127  001690  100E               	iorwf	(___aomod@divisor+3)^0,w,c
  2128  001692  100F               	iorwf	(___aomod@divisor+4)^0,w,c
  2129  001694  1010               	iorwf	(___aomod@divisor+5)^0,w,c
  2130  001696  1011               	iorwf	(___aomod@divisor+6)^0,w,c
  2131  001698  1012               	iorwf	(___aomod@divisor+7)^0,w,c
  2132  00169A  B4D8               	btfsc	status,2,c
  2133  00169C  EF52  F00B         	goto	u1321
  2134  0016A0  EF54  F00B         	goto	u1320
  2135  0016A4                     u1321:
  2136  0016A4  EF9C  F00B         	goto	l1836
  2137  0016A8                     u1320:
  2138  0016A8  0E01               	movlw	1
  2139  0016AA  6E13               	movwf	___aomod@counter^0,c
  2140  0016AC  EF62  F00B         	goto	l1826
  2141  0016B0                     l1824:
  2142  0016B0  90D8               	bcf	status,0,c
  2143  0016B2  360B               	rlcf	___aomod@divisor^0,f,c
  2144  0016B4  360C               	rlcf	(___aomod@divisor+1)^0,f,c
  2145  0016B6  360D               	rlcf	(___aomod@divisor+2)^0,f,c
  2146  0016B8  360E               	rlcf	(___aomod@divisor+3)^0,f,c
  2147  0016BA  360F               	rlcf	(___aomod@divisor+4)^0,f,c
  2148  0016BC  3610               	rlcf	(___aomod@divisor+5)^0,f,c
  2149  0016BE  3611               	rlcf	(___aomod@divisor+6)^0,f,c
  2150  0016C0  3612               	rlcf	(___aomod@divisor+7)^0,f,c
  2151  0016C2  2A13               	incf	___aomod@counter^0,f,c
  2152  0016C4                     l1826:
  2153  0016C4  AE12               	btfss	(___aomod@divisor+7)^0,7,c
  2154  0016C6  EF67  F00B         	goto	u1331
  2155  0016CA  EF69  F00B         	goto	u1330
  2156  0016CE                     u1331:
  2157  0016CE  EF58  F00B         	goto	l1824
  2158  0016D2                     u1330:
  2159  0016D2                     l1828:
  2160  0016D2  500B               	movf	___aomod@divisor^0,w,c
  2161  0016D4  5C03               	subwf	___aomod@dividend^0,w,c
  2162  0016D6  500C               	movf	(___aomod@divisor+1)^0,w,c
  2163  0016D8  5804               	subwfb	(___aomod@dividend+1)^0,w,c
  2164  0016DA  500D               	movf	(___aomod@divisor+2)^0,w,c
  2165  0016DC  5805               	subwfb	(___aomod@dividend+2)^0,w,c
  2166  0016DE  500E               	movf	(___aomod@divisor+3)^0,w,c
  2167  0016E0  5806               	subwfb	(___aomod@dividend+3)^0,w,c
  2168  0016E2  500F               	movf	(___aomod@divisor+4)^0,w,c
  2169  0016E4  5807               	subwfb	(___aomod@dividend+4)^0,w,c
  2170  0016E6  5010               	movf	(___aomod@divisor+5)^0,w,c
  2171  0016E8  5808               	subwfb	(___aomod@dividend+5)^0,w,c
  2172  0016EA  5011               	movf	(___aomod@divisor+6)^0,w,c
  2173  0016EC  5809               	subwfb	(___aomod@dividend+6)^0,w,c
  2174  0016EE  5012               	movf	(___aomod@divisor+7)^0,w,c
  2175  0016F0  580A               	subwfb	(___aomod@dividend+7)^0,w,c
  2176  0016F2  A0D8               	btfss	status,0,c
  2177  0016F4  EF7E  F00B         	goto	u1341
  2178  0016F8  EF80  F00B         	goto	u1340
  2179  0016FC                     u1341:
  2180  0016FC  EF90  F00B         	goto	l1832
  2181  001700                     u1340:
  2182  001700  500B               	movf	___aomod@divisor^0,w,c
  2183  001702  5E03               	subwf	___aomod@dividend^0,f,c
  2184  001704  500C               	movf	(___aomod@divisor+1)^0,w,c
  2185  001706  5A04               	subwfb	(___aomod@dividend+1)^0,f,c
  2186  001708  500D               	movf	(___aomod@divisor+2)^0,w,c
  2187  00170A  5A05               	subwfb	(___aomod@dividend+2)^0,f,c
  2188  00170C  500E               	movf	(___aomod@divisor+3)^0,w,c
  2189  00170E  5A06               	subwfb	(___aomod@dividend+3)^0,f,c
  2190  001710  500F               	movf	(___aomod@divisor+4)^0,w,c
  2191  001712  5A07               	subwfb	(___aomod@dividend+4)^0,f,c
  2192  001714  5010               	movf	(___aomod@divisor+5)^0,w,c
  2193  001716  5A08               	subwfb	(___aomod@dividend+5)^0,f,c
  2194  001718  5011               	movf	(___aomod@divisor+6)^0,w,c
  2195  00171A  5A09               	subwfb	(___aomod@dividend+6)^0,f,c
  2196  00171C  5012               	movf	(___aomod@divisor+7)^0,w,c
  2197  00171E  5A0A               	subwfb	(___aomod@dividend+7)^0,f,c
  2198  001720                     l1832:
  2199  001720  90D8               	bcf	status,0,c
  2200  001722  3212               	rrcf	(___aomod@divisor+7)^0,f,c
  2201  001724  3211               	rrcf	(___aomod@divisor+6)^0,f,c
  2202  001726  3210               	rrcf	(___aomod@divisor+5)^0,f,c
  2203  001728  320F               	rrcf	(___aomod@divisor+4)^0,f,c
  2204  00172A  320E               	rrcf	(___aomod@divisor+3)^0,f,c
  2205  00172C  320D               	rrcf	(___aomod@divisor+2)^0,f,c
  2206  00172E  320C               	rrcf	(___aomod@divisor+1)^0,f,c
  2207  001730  320B               	rrcf	___aomod@divisor^0,f,c
  2208  001732  2E13               	decfsz	___aomod@counter^0,f,c
  2209  001734  EF69  F00B         	goto	l1828
  2210  001738                     l1836:
  2211  001738  5014               	movf	___aomod@sign^0,w,c
  2212  00173A  B4D8               	btfsc	status,2,c
  2213  00173C  EFA2  F00B         	goto	u1351
  2214  001740  EFA4  F00B         	goto	u1350
  2215  001744                     u1351:
  2216  001744  EFB4  F00B         	goto	l1840
  2217  001748                     u1350:
  2218  001748  1E0A               	comf	(___aomod@dividend+7)^0,f,c
  2219  00174A  1E09               	comf	(___aomod@dividend+6)^0,f,c
  2220  00174C  1E08               	comf	(___aomod@dividend+5)^0,f,c
  2221  00174E  1E07               	comf	(___aomod@dividend+4)^0,f,c
  2222  001750  1E06               	comf	(___aomod@dividend+3)^0,f,c
  2223  001752  1E05               	comf	(___aomod@dividend+2)^0,f,c
  2224  001754  1E04               	comf	(___aomod@dividend+1)^0,f,c
  2225  001756  6C03               	negf	___aomod@dividend^0,c
  2226  001758  0E00               	movlw	0
  2227  00175A  2204               	addwfc	(___aomod@dividend+1)^0,f,c
  2228  00175C  2205               	addwfc	(___aomod@dividend+2)^0,f,c
  2229  00175E  2206               	addwfc	(___aomod@dividend+3)^0,f,c
  2230  001760  2207               	addwfc	(___aomod@dividend+4)^0,f,c
  2231  001762  2208               	addwfc	(___aomod@dividend+5)^0,f,c
  2232  001764  2209               	addwfc	(___aomod@dividend+6)^0,f,c
  2233  001766  220A               	addwfc	(___aomod@dividend+7)^0,f,c
  2234  001768                     l1840:
  2235  001768  C003  F003         	movff	___aomod@dividend,?___aomod
  2236  00176C  C004  F004         	movff	___aomod@dividend+1,?___aomod+1
  2237  001770  C005  F005         	movff	___aomod@dividend+2,?___aomod+2
  2238  001774  C006  F006         	movff	___aomod@dividend+3,?___aomod+3
  2239  001778  C007  F007         	movff	___aomod@dividend+4,?___aomod+4
  2240  00177C  C008  F008         	movff	___aomod@dividend+5,?___aomod+5
  2241  001780  C009  F009         	movff	___aomod@dividend+6,?___aomod+6
  2242  001784  C00A  F00A         	movff	___aomod@dividend+7,?___aomod+7
  2243  001788  0012               	return		;funcret
  2244  00178A                     __end_of___aomod:
  2245                           	callstack 0
  2246                           
  2247 ;; *************** function ___aodiv *****************
  2248 ;; Defined at:
  2249 ;;		line 9 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/aodiv.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  dividend        8    2[COMRAM] long long 
  2252 ;;  divisor         8   10[COMRAM] long long 
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  quotient        8   20[COMRAM] long long 
  2255 ;;  sign            1   19[COMRAM] unsigned char 
  2256 ;;  counter         1   18[COMRAM] unsigned char 
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  8    2[COMRAM] long long 
  2259 ;; Registers used:
  2260 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2266 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2269 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2270 ;;Total ram usage:       26 bytes
  2271 ;; Hardware stack levels used:    1
  2272 ;; Hardware stack levels required when called:    1
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_dtoa
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text12
  2281  00149E                     __ptext12:
  2282                           	callstack 0
  2283  00149E                     ___aodiv:
  2284                           	callstack 25
  2285  00149E  0E00               	movlw	0
  2286  0014A0  6E14               	movwf	___aodiv@sign^0,c
  2287  0014A2  BE12               	btfsc	(___aodiv@divisor+7)^0,7,c
  2288  0014A4  EF58  F00A         	goto	u1230
  2289  0014A8  EF56  F00A         	goto	u1231
  2290  0014AC                     u1231:
  2291  0014AC  EF6A  F00A         	goto	l1772
  2292  0014B0                     u1230:
  2293  0014B0  1E12               	comf	(___aodiv@divisor+7)^0,f,c
  2294  0014B2  1E11               	comf	(___aodiv@divisor+6)^0,f,c
  2295  0014B4  1E10               	comf	(___aodiv@divisor+5)^0,f,c
  2296  0014B6  1E0F               	comf	(___aodiv@divisor+4)^0,f,c
  2297  0014B8  1E0E               	comf	(___aodiv@divisor+3)^0,f,c
  2298  0014BA  1E0D               	comf	(___aodiv@divisor+2)^0,f,c
  2299  0014BC  1E0C               	comf	(___aodiv@divisor+1)^0,f,c
  2300  0014BE  6C0B               	negf	___aodiv@divisor^0,c
  2301  0014C0  0E00               	movlw	0
  2302  0014C2  220C               	addwfc	(___aodiv@divisor+1)^0,f,c
  2303  0014C4  220D               	addwfc	(___aodiv@divisor+2)^0,f,c
  2304  0014C6  220E               	addwfc	(___aodiv@divisor+3)^0,f,c
  2305  0014C8  220F               	addwfc	(___aodiv@divisor+4)^0,f,c
  2306  0014CA  2210               	addwfc	(___aodiv@divisor+5)^0,f,c
  2307  0014CC  2211               	addwfc	(___aodiv@divisor+6)^0,f,c
  2308  0014CE  2212               	addwfc	(___aodiv@divisor+7)^0,f,c
  2309  0014D0  0E01               	movlw	1
  2310  0014D2  6E14               	movwf	___aodiv@sign^0,c
  2311  0014D4                     l1772:
  2312  0014D4  BE0A               	btfsc	(___aodiv@dividend+7)^0,7,c
  2313  0014D6  EF71  F00A         	goto	u1240
  2314  0014DA  EF6F  F00A         	goto	u1241
  2315  0014DE                     u1241:
  2316  0014DE  EF83  F00A         	goto	l1778
  2317  0014E2                     u1240:
  2318  0014E2  1E0A               	comf	(___aodiv@dividend+7)^0,f,c
  2319  0014E4  1E09               	comf	(___aodiv@dividend+6)^0,f,c
  2320  0014E6  1E08               	comf	(___aodiv@dividend+5)^0,f,c
  2321  0014E8  1E07               	comf	(___aodiv@dividend+4)^0,f,c
  2322  0014EA  1E06               	comf	(___aodiv@dividend+3)^0,f,c
  2323  0014EC  1E05               	comf	(___aodiv@dividend+2)^0,f,c
  2324  0014EE  1E04               	comf	(___aodiv@dividend+1)^0,f,c
  2325  0014F0  6C03               	negf	___aodiv@dividend^0,c
  2326  0014F2  0E00               	movlw	0
  2327  0014F4  2204               	addwfc	(___aodiv@dividend+1)^0,f,c
  2328  0014F6  2205               	addwfc	(___aodiv@dividend+2)^0,f,c
  2329  0014F8  2206               	addwfc	(___aodiv@dividend+3)^0,f,c
  2330  0014FA  2207               	addwfc	(___aodiv@dividend+4)^0,f,c
  2331  0014FC  2208               	addwfc	(___aodiv@dividend+5)^0,f,c
  2332  0014FE  2209               	addwfc	(___aodiv@dividend+6)^0,f,c
  2333  001500  220A               	addwfc	(___aodiv@dividend+7)^0,f,c
  2334  001502  0E01               	movlw	1
  2335  001504  1A14               	xorwf	___aodiv@sign^0,f,c
  2336  001506                     l1778:
  2337  001506  EE20  F015         	lfsr	2,___aodiv@quotient
  2338  00150A  0E07               	movlw	7
  2339  00150C                     u1251:
  2340  00150C  6ADE               	clrf	postinc2,c
  2341  00150E  06E8               	decf	wreg,f,c
  2342  001510  E2FD               	bc	u1251
  2343  001512  500B               	movf	___aodiv@divisor^0,w,c
  2344  001514  100C               	iorwf	(___aodiv@divisor+1)^0,w,c
  2345  001516  100D               	iorwf	(___aodiv@divisor+2)^0,w,c
  2346  001518  100E               	iorwf	(___aodiv@divisor+3)^0,w,c
  2347  00151A  100F               	iorwf	(___aodiv@divisor+4)^0,w,c
  2348  00151C  1010               	iorwf	(___aodiv@divisor+5)^0,w,c
  2349  00151E  1011               	iorwf	(___aodiv@divisor+6)^0,w,c
  2350  001520  1012               	iorwf	(___aodiv@divisor+7)^0,w,c
  2351  001522  B4D8               	btfsc	status,2,c
  2352  001524  EF96  F00A         	goto	u1261
  2353  001528  EF98  F00A         	goto	u1260
  2354  00152C                     u1261:
  2355  00152C  EFEA  F00A         	goto	l1800
  2356  001530                     u1260:
  2357  001530  0E01               	movlw	1
  2358  001532  6E13               	movwf	___aodiv@counter^0,c
  2359  001534  EFA6  F00A         	goto	l1786
  2360  001538                     l1784:
  2361  001538  90D8               	bcf	status,0,c
  2362  00153A  360B               	rlcf	___aodiv@divisor^0,f,c
  2363  00153C  360C               	rlcf	(___aodiv@divisor+1)^0,f,c
  2364  00153E  360D               	rlcf	(___aodiv@divisor+2)^0,f,c
  2365  001540  360E               	rlcf	(___aodiv@divisor+3)^0,f,c
  2366  001542  360F               	rlcf	(___aodiv@divisor+4)^0,f,c
  2367  001544  3610               	rlcf	(___aodiv@divisor+5)^0,f,c
  2368  001546  3611               	rlcf	(___aodiv@divisor+6)^0,f,c
  2369  001548  3612               	rlcf	(___aodiv@divisor+7)^0,f,c
  2370  00154A  2A13               	incf	___aodiv@counter^0,f,c
  2371  00154C                     l1786:
  2372  00154C  AE12               	btfss	(___aodiv@divisor+7)^0,7,c
  2373  00154E  EFAB  F00A         	goto	u1271
  2374  001552  EFAD  F00A         	goto	u1270
  2375  001556                     u1271:
  2376  001556  EF9C  F00A         	goto	l1784
  2377  00155A                     u1270:
  2378  00155A                     l1788:
  2379  00155A  90D8               	bcf	status,0,c
  2380  00155C  3615               	rlcf	___aodiv@quotient^0,f,c
  2381  00155E  3616               	rlcf	(___aodiv@quotient+1)^0,f,c
  2382  001560  3617               	rlcf	(___aodiv@quotient+2)^0,f,c
  2383  001562  3618               	rlcf	(___aodiv@quotient+3)^0,f,c
  2384  001564  3619               	rlcf	(___aodiv@quotient+4)^0,f,c
  2385  001566  361A               	rlcf	(___aodiv@quotient+5)^0,f,c
  2386  001568  361B               	rlcf	(___aodiv@quotient+6)^0,f,c
  2387  00156A  361C               	rlcf	(___aodiv@quotient+7)^0,f,c
  2388  00156C  500B               	movf	___aodiv@divisor^0,w,c
  2389  00156E  5C03               	subwf	___aodiv@dividend^0,w,c
  2390  001570  500C               	movf	(___aodiv@divisor+1)^0,w,c
  2391  001572  5804               	subwfb	(___aodiv@dividend+1)^0,w,c
  2392  001574  500D               	movf	(___aodiv@divisor+2)^0,w,c
  2393  001576  5805               	subwfb	(___aodiv@dividend+2)^0,w,c
  2394  001578  500E               	movf	(___aodiv@divisor+3)^0,w,c
  2395  00157A  5806               	subwfb	(___aodiv@dividend+3)^0,w,c
  2396  00157C  500F               	movf	(___aodiv@divisor+4)^0,w,c
  2397  00157E  5807               	subwfb	(___aodiv@dividend+4)^0,w,c
  2398  001580  5010               	movf	(___aodiv@divisor+5)^0,w,c
  2399  001582  5808               	subwfb	(___aodiv@dividend+5)^0,w,c
  2400  001584  5011               	movf	(___aodiv@divisor+6)^0,w,c
  2401  001586  5809               	subwfb	(___aodiv@dividend+6)^0,w,c
  2402  001588  5012               	movf	(___aodiv@divisor+7)^0,w,c
  2403  00158A  580A               	subwfb	(___aodiv@dividend+7)^0,w,c
  2404  00158C  A0D8               	btfss	status,0,c
  2405  00158E  EFCB  F00A         	goto	u1281
  2406  001592  EFCD  F00A         	goto	u1280
  2407  001596                     u1281:
  2408  001596  EFDE  F00A         	goto	l1796
  2409  00159A                     u1280:
  2410  00159A  500B               	movf	___aodiv@divisor^0,w,c
  2411  00159C  5E03               	subwf	___aodiv@dividend^0,f,c
  2412  00159E  500C               	movf	(___aodiv@divisor+1)^0,w,c
  2413  0015A0  5A04               	subwfb	(___aodiv@dividend+1)^0,f,c
  2414  0015A2  500D               	movf	(___aodiv@divisor+2)^0,w,c
  2415  0015A4  5A05               	subwfb	(___aodiv@dividend+2)^0,f,c
  2416  0015A6  500E               	movf	(___aodiv@divisor+3)^0,w,c
  2417  0015A8  5A06               	subwfb	(___aodiv@dividend+3)^0,f,c
  2418  0015AA  500F               	movf	(___aodiv@divisor+4)^0,w,c
  2419  0015AC  5A07               	subwfb	(___aodiv@dividend+4)^0,f,c
  2420  0015AE  5010               	movf	(___aodiv@divisor+5)^0,w,c
  2421  0015B0  5A08               	subwfb	(___aodiv@dividend+5)^0,f,c
  2422  0015B2  5011               	movf	(___aodiv@divisor+6)^0,w,c
  2423  0015B4  5A09               	subwfb	(___aodiv@dividend+6)^0,f,c
  2424  0015B6  5012               	movf	(___aodiv@divisor+7)^0,w,c
  2425  0015B8  5A0A               	subwfb	(___aodiv@dividend+7)^0,f,c
  2426  0015BA  8015               	bsf	___aodiv@quotient^0,0,c
  2427  0015BC                     l1796:
  2428  0015BC  90D8               	bcf	status,0,c
  2429  0015BE  3212               	rrcf	(___aodiv@divisor+7)^0,f,c
  2430  0015C0  3211               	rrcf	(___aodiv@divisor+6)^0,f,c
  2431  0015C2  3210               	rrcf	(___aodiv@divisor+5)^0,f,c
  2432  0015C4  320F               	rrcf	(___aodiv@divisor+4)^0,f,c
  2433  0015C6  320E               	rrcf	(___aodiv@divisor+3)^0,f,c
  2434  0015C8  320D               	rrcf	(___aodiv@divisor+2)^0,f,c
  2435  0015CA  320C               	rrcf	(___aodiv@divisor+1)^0,f,c
  2436  0015CC  320B               	rrcf	___aodiv@divisor^0,f,c
  2437  0015CE  2E13               	decfsz	___aodiv@counter^0,f,c
  2438  0015D0  EFAD  F00A         	goto	l1788
  2439  0015D4                     l1800:
  2440  0015D4  5014               	movf	___aodiv@sign^0,w,c
  2441  0015D6  B4D8               	btfsc	status,2,c
  2442  0015D8  EFF0  F00A         	goto	u1291
  2443  0015DC  EFF2  F00A         	goto	u1290
  2444  0015E0                     u1291:
  2445  0015E0  EF02  F00B         	goto	l1804
  2446  0015E4                     u1290:
  2447  0015E4  1E1C               	comf	(___aodiv@quotient+7)^0,f,c
  2448  0015E6  1E1B               	comf	(___aodiv@quotient+6)^0,f,c
  2449  0015E8  1E1A               	comf	(___aodiv@quotient+5)^0,f,c
  2450  0015EA  1E19               	comf	(___aodiv@quotient+4)^0,f,c
  2451  0015EC  1E18               	comf	(___aodiv@quotient+3)^0,f,c
  2452  0015EE  1E17               	comf	(___aodiv@quotient+2)^0,f,c
  2453  0015F0  1E16               	comf	(___aodiv@quotient+1)^0,f,c
  2454  0015F2  6C15               	negf	___aodiv@quotient^0,c
  2455  0015F4  0E00               	movlw	0
  2456  0015F6  2216               	addwfc	(___aodiv@quotient+1)^0,f,c
  2457  0015F8  2217               	addwfc	(___aodiv@quotient+2)^0,f,c
  2458  0015FA  2218               	addwfc	(___aodiv@quotient+3)^0,f,c
  2459  0015FC  2219               	addwfc	(___aodiv@quotient+4)^0,f,c
  2460  0015FE  221A               	addwfc	(___aodiv@quotient+5)^0,f,c
  2461  001600  221B               	addwfc	(___aodiv@quotient+6)^0,f,c
  2462  001602  221C               	addwfc	(___aodiv@quotient+7)^0,f,c
  2463  001604                     l1804:
  2464  001604  C015  F003         	movff	___aodiv@quotient,?___aodiv
  2465  001608  C016  F004         	movff	___aodiv@quotient+1,?___aodiv+1
  2466  00160C  C017  F005         	movff	___aodiv@quotient+2,?___aodiv+2
  2467  001610  C018  F006         	movff	___aodiv@quotient+3,?___aodiv+3
  2468  001614  C019  F007         	movff	___aodiv@quotient+4,?___aodiv+4
  2469  001618  C01A  F008         	movff	___aodiv@quotient+5,?___aodiv+5
  2470  00161C  C01B  F009         	movff	___aodiv@quotient+6,?___aodiv+6
  2471  001620  C01C  F00A         	movff	___aodiv@quotient+7,?___aodiv+7
  2472  001624  0012               	return		;funcret
  2473  001626                     __end_of___aodiv:
  2474                           	callstack 0
  2475                           
  2476 ;; *************** function _readADCChannel *****************
  2477 ;; Defined at:
  2478 ;;		line 13 in file "./ADC.h"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;  channel         1    wreg     unsigned char 
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;  channel         1    6[COMRAM] unsigned char 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  2    2[COMRAM] unsigned short 
  2485 ;; Registers used:
  2486 ;;		wreg, status,2, status,0
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2492 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;Total ram usage:        5 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; Hardware stack levels required when called:    1
  2499 ;; This function calls:
  2500 ;;		Nothing
  2501 ;; This function is called by:
  2502 ;;		_main
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text13
  2507  001A6C                     __ptext13:
  2508                           	callstack 0
  2509  001A6C                     _readADCChannel:
  2510                           	callstack 29
  2511                           
  2512                           ;incstack = 0
  2513                           ;readADCChannel@channel stored from wreg
  2514  001A6C  6E07               	movwf	readADCChannel@channel^0,c
  2515  001A6E                     
  2516                           ;./ADC.h: 13:     unsigned short readADCChannel(unsigned char channel);./ADC.h: 14:     
      +                          {;./ADC.h: 16:         ADCON0bits.CHS0 = channel & 0x1;
  2517  001A6E  C007  F005         	movff	readADCChannel@channel,??_readADCChannel
  2518  001A72  0E01               	movlw	1
  2519  001A74  1605               	andwf	??_readADCChannel^0,f,c
  2520  001A76  4605               	rlncf	??_readADCChannel^0,f,c
  2521  001A78  4605               	rlncf	??_readADCChannel^0,f,c
  2522  001A7A  50C2               	movf	194,w,c	;volatile
  2523  001A7C  1805               	xorwf	??_readADCChannel^0,w,c
  2524  001A7E  0BFB               	andlw	-5
  2525  001A80  1805               	xorwf	??_readADCChannel^0,w,c
  2526  001A82  6EC2               	movwf	194,c	;volatile
  2527                           
  2528                           ;./ADC.h: 17:         ADCON0bits.CHS1 = (channel >> 1) & 0x1;
  2529  001A84  C007  F005         	movff	readADCChannel@channel,??_readADCChannel
  2530  001A88  90D8               	bcf	status,0,c
  2531  001A8A  3205               	rrcf	??_readADCChannel^0,f,c
  2532  001A8C  0E01               	movlw	1
  2533  001A8E  1605               	andwf	??_readADCChannel^0,f,c
  2534  001A90  4605               	rlncf	??_readADCChannel^0,f,c
  2535  001A92  4605               	rlncf	??_readADCChannel^0,f,c
  2536  001A94  4605               	rlncf	??_readADCChannel^0,f,c
  2537  001A96  50C2               	movf	194,w,c	;volatile
  2538  001A98  1805               	xorwf	??_readADCChannel^0,w,c
  2539  001A9A  0BF7               	andlw	-9
  2540  001A9C  1805               	xorwf	??_readADCChannel^0,w,c
  2541  001A9E  6EC2               	movwf	194,c	;volatile
  2542                           
  2543                           ;./ADC.h: 18:         ADCON0bits.CHS2 = (channel >> 2) & 0x1;
  2544  001AA0  C007  F005         	movff	readADCChannel@channel,??_readADCChannel
  2545  001AA4  90D8               	bcf	status,0,c
  2546  001AA6  3205               	rrcf	??_readADCChannel^0,f,c
  2547  001AA8  90D8               	bcf	status,0,c
  2548  001AAA  3205               	rrcf	??_readADCChannel^0,f,c
  2549  001AAC  0E01               	movlw	1
  2550  001AAE  1605               	andwf	??_readADCChannel^0,f,c
  2551  001AB0  3A05               	swapf	??_readADCChannel^0,f,c
  2552  001AB2  50C2               	movf	194,w,c	;volatile
  2553  001AB4  1805               	xorwf	??_readADCChannel^0,w,c
  2554  001AB6  0BEF               	andlw	-17
  2555  001AB8  1805               	xorwf	??_readADCChannel^0,w,c
  2556  001ABA  6EC2               	movwf	194,c	;volatile
  2557                           
  2558                           ;./ADC.h: 19:         ADCON0bits.CHS3 = (channel >> 3) & 0x1;
  2559  001ABC  C007  F005         	movff	readADCChannel@channel,??_readADCChannel
  2560  001AC0  90D8               	bcf	status,0,c
  2561  001AC2  3205               	rrcf	??_readADCChannel^0,f,c
  2562  001AC4  90D8               	bcf	status,0,c
  2563  001AC6  3205               	rrcf	??_readADCChannel^0,f,c
  2564  001AC8  90D8               	bcf	status,0,c
  2565  001ACA  3205               	rrcf	??_readADCChannel^0,f,c
  2566  001ACC  0E01               	movlw	1
  2567  001ACE  1605               	andwf	??_readADCChannel^0,f,c
  2568  001AD0  3A05               	swapf	??_readADCChannel^0,f,c
  2569  001AD2  4605               	rlncf	??_readADCChannel^0,f,c
  2570  001AD4  50C2               	movf	194,w,c	;volatile
  2571  001AD6  1805               	xorwf	??_readADCChannel^0,w,c
  2572  001AD8  0BDF               	andlw	-33
  2573  001ADA  1805               	xorwf	??_readADCChannel^0,w,c
  2574  001ADC  6EC2               	movwf	194,c	;volatile
  2575  001ADE                     
  2576                           ;./ADC.h: 23:         ADCON0bits.GODONE = 1;
  2577  001ADE  82C2               	bsf	194,1,c	;volatile
  2578  001AE0                     l35:
  2579  001AE0  B2C2               	btfsc	194,1,c	;volatile
  2580  001AE2  EF75  F00D         	goto	u1611
  2581  001AE6  EF77  F00D         	goto	u1610
  2582  001AEA                     u1611:
  2583  001AEA  EF70  F00D         	goto	l35
  2584  001AEE                     u1610:
  2585  001AEE                     
  2586                           ;./ADC.h: 28:         PIR1bits.ADIF = 0;
  2587  001AEE  9C9E               	bcf	158,6,c	;volatile
  2588  001AF0                     
  2589                           ;./ADC.h: 30:         return (unsigned short)((ADRESH << 8)+ADRESL);
  2590  001AF0  50C4               	movf	196,w,c	;volatile
  2591  001AF2  6E06               	movwf	(??_readADCChannel+1)^0,c
  2592  001AF4  6A05               	clrf	??_readADCChannel^0,c
  2593  001AF6  50C3               	movf	195,w,c	;volatile
  2594  001AF8  2405               	addwf	??_readADCChannel^0,w,c
  2595  001AFA  6E03               	movwf	?_readADCChannel^0,c
  2596  001AFC  0E00               	movlw	0
  2597  001AFE  2006               	addwfc	(??_readADCChannel+1)^0,w,c
  2598  001B00  6E04               	movwf	(?_readADCChannel+1)^0,c
  2599  001B02  0012               	return		;funcret
  2600  001B04                     __end_of_readADCChannel:
  2601                           	callstack 0
  2602                           
  2603 ;; *************** function _initADC *****************
  2604 ;; Defined at:
  2605 ;;		line 35 in file "./ADC.h"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		None
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;Total ram usage:        0 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    1
  2626 ;; This function calls:
  2627 ;;		Nothing
  2628 ;; This function is called by:
  2629 ;;		_main
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           	psect	text14
  2634  001E50                     __ptext14:
  2635                           	callstack 0
  2636  001E50                     _initADC:
  2637                           	callstack 29
  2638  001E50                     
  2639                           ;./ADC.h: 37:         ADCON1bits.PCFG3 = 1;
  2640  001E50  86C1               	bsf	193,3,c	;volatile
  2641                           
  2642                           ;./ADC.h: 38:         ADCON1bits.PCFG2 = 1;
  2643  001E52  84C1               	bsf	193,2,c	;volatile
  2644                           
  2645                           ;./ADC.h: 39:         ADCON1bits.PCFG1 = 0;
  2646  001E54  92C1               	bcf	193,1,c	;volatile
  2647                           
  2648                           ;./ADC.h: 40:         ADCON1bits.PCFG0 = 0;
  2649  001E56  90C1               	bcf	193,0,c	;volatile
  2650                           
  2651                           ;./ADC.h: 42:         ADCON1bits.VCFG0 = 0;
  2652  001E58  98C1               	bcf	193,4,c	;volatile
  2653                           
  2654                           ;./ADC.h: 43:         ADCON1bits.VCFG1 = 0;
  2655  001E5A  9AC1               	bcf	193,5,c	;volatile
  2656                           
  2657                           ;./ADC.h: 45:         TRISAbits.RA0 = 1;
  2658  001E5C  8092               	bsf	146,0,c	;volatile
  2659                           
  2660                           ;./ADC.h: 46:         TRISAbits.RA1 = 1;
  2661  001E5E  8292               	bsf	146,1,c	;volatile
  2662                           
  2663                           ;./ADC.h: 47:         TRISAbits.RA2 = 0;
  2664  001E60  9492               	bcf	146,2,c	;volatile
  2665                           
  2666                           ;./ADC.h: 56:         ADCON2bits.ADCS2 = 0;
  2667  001E62  94C0               	bcf	192,2,c	;volatile
  2668                           
  2669                           ;./ADC.h: 57:         ADCON2bits.ADCS1 = 1;
  2670  001E64  82C0               	bsf	192,1,c	;volatile
  2671                           
  2672                           ;./ADC.h: 58:         ADCON2bits.ADCS0 = 0;
  2673  001E66  90C0               	bcf	192,0,c	;volatile
  2674                           
  2675                           ;./ADC.h: 60:         ADCON2bits.ACQT2 = 0;
  2676  001E68  9AC0               	bcf	192,5,c	;volatile
  2677                           
  2678                           ;./ADC.h: 61:         ADCON2bits.ACQT1 = 1;
  2679  001E6A  88C0               	bsf	192,4,c	;volatile
  2680                           
  2681                           ;./ADC.h: 62:         ADCON2bits.ACQT0 = 0;
  2682  001E6C  96C0               	bcf	192,3,c	;volatile
  2683                           
  2684                           ;./ADC.h: 64:         ADCON2bits.ADFM = 1;
  2685  001E6E  8EC0               	bsf	192,7,c	;volatile
  2686                           
  2687                           ;./ADC.h: 66:         ADCON0bits.ADON = 1;
  2688  001E70  80C2               	bsf	194,0,c	;volatile
  2689  001E72  0012               	return		;funcret
  2690  001E74                     __end_of_initADC:
  2691                           	callstack 0
  2692                           
  2693 ;; *************** function _LCDStr *****************
  2694 ;; Defined at:
  2695 ;;		line 91 in file "./LCD.h"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  str             2    4[COMRAM] PTR const unsigned char 
  2698 ;;		 -> main@values(10), STR_1(8), 
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;  i               1    8[COMRAM] unsigned char 
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2710 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;Total ram usage:        5 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    2
  2717 ;; This function calls:
  2718 ;;		_LCDDat
  2719 ;; This function is called by:
  2720 ;;		_main
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text15
  2725  001916                     __ptext15:
  2726                           	callstack 0
  2727  001916                     _LCDStr:
  2728                           	callstack 28
  2729  001916                     
  2730                           ;./LCD.h: 92:   for (unsigned char i = 0; str[i] != 0; i++) {
  2731  001916  0E00               	movlw	0
  2732  001918  6E09               	movwf	LCDStr@i^0,c
  2733  00191A  EFC1  F00C         	goto	l2054
  2734  00191E                     l2038:
  2735                           
  2736                           ;./LCD.h: 93:     LCDDat(str[i]);
  2737  00191E  5009               	movf	LCDStr@i^0,w,c
  2738  001920  2405               	addwf	LCDStr@str^0,w,c
  2739  001922  6E07               	movwf	??_LCDStr^0,c
  2740  001924  0E00               	movlw	0
  2741  001926  2006               	addwfc	(LCDStr@str+1)^0,w,c
  2742  001928  6E08               	movwf	(??_LCDStr+1)^0,c
  2743  00192A  C007  FFF6         	movff	??_LCDStr,tblptrl
  2744  00192E  C008  FFF7         	movff	??_LCDStr+1,tblptrh
  2745  001932  0E00               	movlw	low (__smallconst shr (0+16))
  2746  001934  6EF8               	movwf	tblptru,c
  2747  001936  0E0F               	movlw	(high __ramtop+-1)
  2748  001938  64F7               	cpfsgt	tblptrh,c
  2749  00193A  D003               	bra	u1657
  2750  00193C  0008               	tblrd		*
  2751  00193E  50F5               	movf	tablat,w,c
  2752  001940  D005               	bra	u1650
  2753  001942                     u1657:
  2754  001942  CFF6 FFE1          	movff	tblptrl,fsr1l
  2755  001946  CFF7 FFE2          	movff	tblptrh,fsr1h
  2756  00194A  50E7               	movf	indf1,w,c
  2757  00194C                     u1650:
  2758  00194C  ECDE  F00E         	call	_LCDDat
  2759  001950                     
  2760                           ;./LCD.h: 94:     lcd_x ++;
  2761  001950  2A72               	incf	_lcd_x^0,f,c
  2762  001952                     
  2763                           ;./LCD.h: 95:     if(lcd_x == 17) {
  2764  001952  0E11               	movlw	17
  2765  001954  1872               	xorwf	_lcd_x^0,w,c
  2766  001956  A4D8               	btfss	status,2,c
  2767  001958  EFB0  F00C         	goto	u1661
  2768  00195C  EFB2  F00C         	goto	u1660
  2769  001960                     u1661:
  2770  001960  EFC0  F00C         	goto	l2052
  2771  001964                     u1660:
  2772  001964                     
  2773                           ;./LCD.h: 96:       lcd_x = 1;
  2774  001964  0E01               	movlw	1
  2775  001966  6E72               	movwf	_lcd_x^0,c
  2776  001968                     
  2777                           ;./LCD.h: 97:       lcd_y++;
  2778  001968  2A71               	incf	_lcd_y^0,f,c
  2779  00196A                     
  2780                           ;./LCD.h: 98:       if (lcd_y == 5) {
  2781  00196A  0E05               	movlw	5
  2782  00196C  1871               	xorwf	_lcd_y^0,w,c
  2783  00196E  A4D8               	btfss	status,2,c
  2784  001970  EFBC  F00C         	goto	u1671
  2785  001974  EFBE  F00C         	goto	u1670
  2786  001978                     u1671:
  2787  001978  EFC0  F00C         	goto	l2052
  2788  00197C                     u1670:
  2789  00197C                     
  2790                           ;./LCD.h: 99:          lcd_y = 1;
  2791  00197C  0E01               	movlw	1
  2792  00197E  6E71               	movwf	_lcd_y^0,c
  2793  001980                     l2052:
  2794                           
  2795                           ;./LCD.h: 103:   }
  2796  001980  2A09               	incf	LCDStr@i^0,f,c
  2797  001982                     l2054:
  2798  001982  5009               	movf	LCDStr@i^0,w,c
  2799  001984  2405               	addwf	LCDStr@str^0,w,c
  2800  001986  6E07               	movwf	??_LCDStr^0,c
  2801  001988  0E00               	movlw	0
  2802  00198A  2006               	addwfc	(LCDStr@str+1)^0,w,c
  2803  00198C  6E08               	movwf	(??_LCDStr+1)^0,c
  2804  00198E  C007  FFF6         	movff	??_LCDStr,tblptrl
  2805  001992  C008  FFF7         	movff	??_LCDStr+1,tblptrh
  2806  001996  0E00               	movlw	low (__smallconst shr (0+16))
  2807  001998  6EF8               	movwf	tblptru,c
  2808  00199A  0E0F               	movlw	(high __ramtop+-1)
  2809  00199C  64F7               	cpfsgt	tblptrh,c
  2810  00199E  D003               	bra	u1687
  2811  0019A0  0008               	tblrd		*
  2812  0019A2  50F5               	movf	tablat,w,c
  2813  0019A4  D005               	bra	u1680
  2814  0019A6                     u1687:
  2815  0019A6  CFF6 FFE1          	movff	tblptrl,fsr1l
  2816  0019AA  CFF7 FFE2          	movff	tblptrh,fsr1h
  2817  0019AE  50E7               	movf	indf1,w,c
  2818  0019B0                     u1680:
  2819  0019B0  0900               	iorlw	0
  2820  0019B2  A4D8               	btfss	status,2,c
  2821  0019B4  EFDE  F00C         	goto	u1691
  2822  0019B8  EFE0  F00C         	goto	u1690
  2823  0019BC                     u1691:
  2824  0019BC  EF8F  F00C         	goto	l2038
  2825  0019C0                     u1690:
  2826  0019C0  0012               	return		;funcret
  2827  0019C2                     __end_of_LCDStr:
  2828                           	callstack 0
  2829                           
  2830 ;; *************** function _LCDGoto *****************
  2831 ;; Defined at:
  2832 ;;		line 72 in file "./LCD.h"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  p_2             1    wreg     unsigned char 
  2835 ;;  p_1             1    4[COMRAM] unsigned char 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  p_2             1    5[COMRAM] unsigned char 
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  1    wreg      void 
  2840 ;; Registers used:
  2841 ;;		wreg, status,2, status,0, cstack
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2847 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2848 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;Total ram usage:        2 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; Hardware stack levels required when called:    2
  2854 ;; This function calls:
  2855 ;;		_LCDCmd
  2856 ;; This function is called by:
  2857 ;;		_main
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text16
  2862  001B04                     __ptext16:
  2863                           	callstack 0
  2864  001B04                     _LCDGoto:
  2865                           	callstack 28
  2866                           
  2867                           ;incstack = 0
  2868                           ;LCDGoto@p_2 stored from wreg
  2869  001B04  6E06               	movwf	LCDGoto@p_2^0,c
  2870  001B06                     
  2871                           ;./LCD.h: 73:   if(p_1==1) {
  2872  001B06  0405               	decf	LCDGoto@p_1^0,w,c
  2873  001B08  A4D8               	btfss	status,2,c
  2874  001B0A  EF89  F00D         	goto	u1621
  2875  001B0E  EF8B  F00D         	goto	u1620
  2876  001B12                     u1621:
  2877  001B12  EF92  F00D         	goto	l2022
  2878  001B16                     u1620:
  2879  001B16                     
  2880                           ;./LCD.h: 74:     LCDCmd(0x80 +((p_2-1)%16));
  2881  001B16  0406               	decf	LCDGoto@p_2^0,w,c
  2882  001B18  0B0F               	andlw	15
  2883  001B1A  0F80               	addlw	128
  2884  001B1C  EC10  F00F         	call	_LCDCmd
  2885                           
  2886                           ;./LCD.h: 75:   }
  2887  001B20  EFB7  F00D         	goto	l2032
  2888  001B24                     l2022:
  2889  001B24  0E02               	movlw	2
  2890  001B26  1805               	xorwf	LCDGoto@p_1^0,w,c
  2891  001B28  A4D8               	btfss	status,2,c
  2892  001B2A  EF99  F00D         	goto	u1631
  2893  001B2E  EF9B  F00D         	goto	u1630
  2894  001B32                     u1631:
  2895  001B32  EFA2  F00D         	goto	l2026
  2896  001B36                     u1630:
  2897  001B36                     
  2898                           ;./LCD.h: 77:     LCDCmd(0xC0 +((p_2-1)%16));
  2899  001B36  0406               	decf	LCDGoto@p_2^0,w,c
  2900  001B38  0B0F               	andlw	15
  2901  001B3A  0FC0               	addlw	192
  2902  001B3C  EC10  F00F         	call	_LCDCmd
  2903                           
  2904                           ;./LCD.h: 78:   }
  2905  001B40  EFB7  F00D         	goto	l2032
  2906  001B44                     l2026:
  2907  001B44  0E03               	movlw	3
  2908  001B46  1805               	xorwf	LCDGoto@p_1^0,w,c
  2909  001B48  A4D8               	btfss	status,2,c
  2910  001B4A  EFA9  F00D         	goto	u1641
  2911  001B4E  EFAB  F00D         	goto	u1640
  2912  001B52                     u1641:
  2913  001B52  EFB2  F00D         	goto	l2030
  2914  001B56                     u1640:
  2915  001B56                     
  2916                           ;./LCD.h: 80:     LCDCmd(0x90 +((p_2-1)%16));
  2917  001B56  0406               	decf	LCDGoto@p_2^0,w,c
  2918  001B58  0B0F               	andlw	15
  2919  001B5A  0F90               	addlw	144
  2920  001B5C  EC10  F00F         	call	_LCDCmd
  2921                           
  2922                           ;./LCD.h: 81:   }
  2923  001B60  EFB7  F00D         	goto	l2032
  2924  001B64                     l2030:
  2925                           
  2926                           ;./LCD.h: 83:     LCDCmd(0xD0 +((p_2-1)%16));
  2927  001B64  0406               	decf	LCDGoto@p_2^0,w,c
  2928  001B66  0B0F               	andlw	15
  2929  001B68  0FD0               	addlw	208
  2930  001B6A  EC10  F00F         	call	_LCDCmd
  2931  001B6E                     l2032:
  2932                           
  2933                           ;./LCD.h: 85:   lcd_x = p_2;
  2934  001B6E  C006  F072         	movff	LCDGoto@p_2,_lcd_x
  2935  001B72                     
  2936                           ;./LCD.h: 86:   lcd_y = p_1;
  2937  001B72  C005  F071         	movff	LCDGoto@p_1,_lcd_y
  2938  001B76  0012               	return		;funcret
  2939  001B78                     __end_of_LCDGoto:
  2940                           	callstack 0
  2941                           
  2942 ;; *************** function _LCDAddSpecialCharacter *****************
  2943 ;; Defined at:
  2944 ;;		line 129 in file "./LCD.h"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  character_in    1    wreg     unsigned char 
  2947 ;;  data            2    4[COMRAM] PTR unsigned char 
  2948 ;;		 -> character(8), 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  character_in    1    6[COMRAM] unsigned char 
  2951 ;;  i               1    7[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2961 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;Total ram usage:        4 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    2
  2968 ;; This function calls:
  2969 ;;		_LCDCmd
  2970 ;;		_LCDDat
  2971 ;; This function is called by:
  2972 ;;		_main
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text17
  2977  001D4E                     __ptext17:
  2978                           	callstack 0
  2979  001D4E                     _LCDAddSpecialCharacter:
  2980                           	callstack 28
  2981                           
  2982                           ;incstack = 0
  2983                           ;LCDAddSpecialCharacter@character_index stored from wreg
  2984  001D4E  6E07               	movwf	LCDAddSpecialCharacter@character_index^0,c
  2985  001D50                     
  2986                           ;./LCD.h: 135:     LCDCmd(0b01000000+(character_index*8));
  2987  001D50  5007               	movf	LCDAddSpecialCharacter@character_index^0,w,c
  2988  001D52  0D08               	mullw	8
  2989  001D54  50F3               	movf	243,w,c
  2990  001D56  0F40               	addlw	64
  2991  001D58  EC10  F00F         	call	_LCDCmd
  2992  001D5C                     
  2993                           ;./LCD.h: 136:     for(byte i=0; i < 8; i++) {
  2994  001D5C  0E00               	movlw	0
  2995  001D5E  6E08               	movwf	LCDAddSpecialCharacter@i^0,c
  2996  001D60                     l2084:
  2997                           
  2998                           ;./LCD.h: 137:         LCDDat(data[i]);
  2999  001D60  5008               	movf	LCDAddSpecialCharacter@i^0,w,c
  3000  001D62  2405               	addwf	LCDAddSpecialCharacter@data^0,w,c
  3001  001D64  6ED9               	movwf	fsr2l,c
  3002  001D66  0E00               	movlw	0
  3003  001D68  2006               	addwfc	(LCDAddSpecialCharacter@data+1)^0,w,c
  3004  001D6A  6EDA               	movwf	fsr2h,c
  3005  001D6C  50DF               	movf	indf2,w,c
  3006  001D6E  ECDE  F00E         	call	_LCDDat
  3007  001D72                     
  3008                           ;./LCD.h: 138:     }
  3009  001D72  2A08               	incf	LCDAddSpecialCharacter@i^0,f,c
  3010  001D74  0E07               	movlw	7
  3011  001D76  6408               	cpfsgt	LCDAddSpecialCharacter@i^0,c
  3012  001D78  EFC0  F00E         	goto	u1701
  3013  001D7C  EFC2  F00E         	goto	u1700
  3014  001D80                     u1701:
  3015  001D80  EFB0  F00E         	goto	l2084
  3016  001D84                     u1700:
  3017  001D84  0012               	return		;funcret
  3018  001D86                     __end_of_LCDAddSpecialCharacter:
  3019                           	callstack 0
  3020                           
  3021 ;; *************** function _LCDDat *****************
  3022 ;; Defined at:
  3023 ;;		line 58 in file "./LCD.h"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  dat             1    wreg     unsigned char 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  dat             1    3[COMRAM] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      void 
  3030 ;; Registers used:
  3031 ;;		wreg
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3040 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3041 ;;Total ram usage:        2 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    1
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		_LCDStr
  3048 ;;		_LCDAddSpecialCharacter
  3049 ;;		_main
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           	psect	text18
  3054  001DBC                     __ptext18:
  3055                           	callstack 0
  3056  001DBC                     _LCDDat:
  3057                           	callstack 28
  3058                           
  3059                           ;incstack = 0
  3060                           ;LCDDat@dat stored from wreg
  3061  001DBC  6E04               	movwf	LCDDat@dat^0,c
  3062  001DBE                     
  3063                           ;./LCD.h: 59:   PORTEbits.RE1 = 0;
  3064  001DBE  9284               	bcf	132,1,c	;volatile
  3065                           
  3066                           ;./LCD.h: 60:   PORTEbits.RE2 = 1;
  3067  001DC0  8484               	bsf	132,2,c	;volatile
  3068  001DC2                     
  3069                           ;./LCD.h: 61:   PORTD = dat;
  3070  001DC2  C004  FF83         	movff	LCDDat@dat,3971	;volatile
  3071  001DC6                     
  3072                           ;./LCD.h: 62:   PORTEbits.RE1 = 1;
  3073  001DC6  8284               	bsf	132,1,c	;volatile
  3074  001DC8                     
  3075                           ;./LCD.h: 63:   _delay((unsigned long)((2000)*(40000000L/4000000.0)));
  3076  001DC8  0E1A               	movlw	26
  3077  001DCA  6E03               	movwf	??_LCDDat^0,c
  3078  001DCC  0EF8               	movlw	248
  3079  001DCE                     u1737:
  3080  001DCE  2EE8               	decfsz	wreg,f,c
  3081  001DD0  D7FE               	bra	u1737
  3082  001DD2  2E03               	decfsz	??_LCDDat^0,f,c
  3083  001DD4  D7FC               	bra	u1737
  3084  001DD6  D000               	nop2	
  3085  001DD8                     
  3086                           ;./LCD.h: 64:   PORTEbits.RE1 = 0;
  3087  001DD8  9284               	bcf	132,1,c	;volatile
  3088  001DDA                     
  3089                           ;./LCD.h: 65:   _delay((unsigned long)((2000)*(40000000L/4000000.0)));
  3090  001DDA  0E1A               	movlw	26
  3091  001DDC  6E03               	movwf	??_LCDDat^0,c
  3092  001DDE  0EF8               	movlw	248
  3093  001DE0                     u1747:
  3094  001DE0  2EE8               	decfsz	wreg,f,c
  3095  001DE2  D7FE               	bra	u1747
  3096  001DE4  2E03               	decfsz	??_LCDDat^0,f,c
  3097  001DE6  D7FC               	bra	u1747
  3098  001DE8  D000               	nop2	
  3099  001DEA                     
  3100                           ;./LCD.h: 66:   PORTEbits.RE2 = 0;
  3101  001DEA  9484               	bcf	132,2,c	;volatile
  3102  001DEC  0012               	return		;funcret
  3103  001DEE                     __end_of_LCDDat:
  3104                           	callstack 0
  3105                           
  3106 ;; *************** function _InitLCD *****************
  3107 ;; Defined at:
  3108 ;;		line 108 in file "./LCD.h"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;		None
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  1    wreg      void 
  3115 ;; Registers used:
  3116 ;;		wreg, status,2, cstack
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;Total ram usage:        0 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    2
  3129 ;; This function calls:
  3130 ;;		_LCDCmd
  3131 ;; This function is called by:
  3132 ;;		_main
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           	psect	text19
  3137  001DEE                     __ptext19:
  3138                           	callstack 0
  3139  001DEE                     _InitLCD:
  3140                           	callstack 28
  3141  001DEE                     
  3142                           ;./LCD.h: 109:   TRISEbits.RE1 = 0;
  3143  001DEE  9296               	bcf	150,1,c	;volatile
  3144                           
  3145                           ;./LCD.h: 110:   TRISEbits.RE2 = 0;
  3146  001DF0  9496               	bcf	150,2,c	;volatile
  3147  001DF2                     
  3148                           ;./LCD.h: 111:   TRISD = 0;
  3149  001DF2  0E00               	movlw	0
  3150  001DF4  6E95               	movwf	149,c	;volatile
  3151  001DF6                     
  3152                           ;./LCD.h: 113:   PORTEbits.RE1 = 0;
  3153  001DF6  9284               	bcf	132,1,c	;volatile
  3154  001DF8                     
  3155                           ;./LCD.h: 114:   PORTEbits.RE2 = 0;
  3156  001DF8  9484               	bcf	132,2,c	;volatile
  3157  001DFA                     
  3158                           ;./LCD.h: 115:   LCDCmd(0x38);
  3159  001DFA  0E38               	movlw	56
  3160  001DFC  EC10  F00F         	call	_LCDCmd
  3161  001E00                     
  3162                           ;./LCD.h: 116:   LCDCmd(0x08);
  3163  001E00  0E08               	movlw	8
  3164  001E02  EC10  F00F         	call	_LCDCmd
  3165  001E06                     
  3166                           ;./LCD.h: 117:   LCDCmd(0x0C);
  3167  001E06  0E0C               	movlw	12
  3168  001E08  EC10  F00F         	call	_LCDCmd
  3169  001E0C                     
  3170                           ;./LCD.h: 118:   LCDCmd(0x06);
  3171  001E0C  0E06               	movlw	6
  3172  001E0E  EC10  F00F         	call	_LCDCmd
  3173  001E12                     
  3174                           ;./LCD.h: 119:   LCDCmd(0x01);
  3175  001E12  0E01               	movlw	1
  3176  001E14  EC10  F00F         	call	_LCDCmd
  3177  001E18                     
  3178                           ;./LCD.h: 120:   LCDCmd(0x80);
  3179  001E18  0E80               	movlw	128
  3180  001E1A  EC10  F00F         	call	_LCDCmd
  3181  001E1E  0012               	return		;funcret
  3182  001E20                     __end_of_InitLCD:
  3183                           	callstack 0
  3184                           
  3185 ;; *************** function _LCDCmd *****************
  3186 ;; Defined at:
  3187 ;;		line 48 in file "./LCD.h"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;  cmd             1    wreg     unsigned char 
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;  cmd             1    3[COMRAM] unsigned char 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      void 
  3194 ;; Registers used:
  3195 ;;		wreg
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;Total ram usage:        2 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    1
  3208 ;; This function calls:
  3209 ;;		Nothing
  3210 ;; This function is called by:
  3211 ;;		_LCDGoto
  3212 ;;		_InitLCD
  3213 ;;		_LCDAddSpecialCharacter
  3214 ;;		_main
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           	psect	text20
  3219  001E20                     __ptext20:
  3220                           	callstack 0
  3221  001E20                     _LCDCmd:
  3222                           	callstack 28
  3223                           
  3224                           ;incstack = 0
  3225                           ;LCDCmd@cmd stored from wreg
  3226  001E20  6E04               	movwf	LCDCmd@cmd^0,c
  3227  001E22                     
  3228                           ;./LCD.h: 49:   PORTEbits.RE1 = 0;
  3229  001E22  9284               	bcf	132,1,c	;volatile
  3230                           
  3231                           ;./LCD.h: 50:   PORTEbits.RE2 = 0;
  3232  001E24  9484               	bcf	132,2,c	;volatile
  3233  001E26                     
  3234                           ;./LCD.h: 51:   PORTD = cmd;
  3235  001E26  C004  FF83         	movff	LCDCmd@cmd,3971	;volatile
  3236  001E2A                     
  3237                           ;./LCD.h: 52:   PORTEbits.RE1 = 1;
  3238  001E2A  8284               	bsf	132,1,c	;volatile
  3239  001E2C                     
  3240                           ;./LCD.h: 53:   _delay((unsigned long)((2000)*(40000000L/4000000.0)));
  3241  001E2C  0E1A               	movlw	26
  3242  001E2E  6E03               	movwf	??_LCDCmd^0,c
  3243  001E30  0EF8               	movlw	248
  3244  001E32                     u1757:
  3245  001E32  2EE8               	decfsz	wreg,f,c
  3246  001E34  D7FE               	bra	u1757
  3247  001E36  2E03               	decfsz	??_LCDCmd^0,f,c
  3248  001E38  D7FC               	bra	u1757
  3249  001E3A  D000               	nop2	
  3250  001E3C                     
  3251                           ;./LCD.h: 54:   PORTEbits.RE1 = 0;
  3252  001E3C  9284               	bcf	132,1,c	;volatile
  3253  001E3E                     
  3254                           ;./LCD.h: 55:   _delay((unsigned long)((2000)*(40000000L/4000000.0)));
  3255  001E3E  0E1A               	movlw	26
  3256  001E40  6E03               	movwf	??_LCDCmd^0,c
  3257  001E42  0EF8               	movlw	248
  3258  001E44                     u1767:
  3259  001E44  2EE8               	decfsz	wreg,f,c
  3260  001E46  D7FE               	bra	u1767
  3261  001E48  2E03               	decfsz	??_LCDCmd^0,f,c
  3262  001E4A  D7FC               	bra	u1767
  3263  001E4C  D000               	nop2	
  3264  001E4E  0012               	return		;funcret
  3265  001E50                     __end_of_LCDCmd:
  3266                           	callstack 0
  3267                           
  3268 ;; *************** function _FNC *****************
  3269 ;; Defined at:
  3270 ;;		line 41 in file "newmain.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;		None
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;Total ram usage:        2 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; This function calls:
  3291 ;;		Nothing
  3292 ;; This function is called by:
  3293 ;;		Interrupt level 2
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	intcode
  3298  000008                     __pintcode:
  3299                           	callstack 0
  3300  000008                     _FNC:
  3301                           	callstack 22
  3302                           
  3303                           ;incstack = 0
  3304  000008  8273               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3305  00000A  ED65  F00E         	call	int_func,f	;refresh shadow registers
  3306                           
  3307                           	psect	intcode_body
  3308  001CCA                     __pintcode_body:
  3309                           	callstack 22
  3310  001CCA                     int_func:
  3311                           	callstack 22
  3312  001CCA  0006               	pop		; remove dummy address from shadow register refresh
  3313  001CCC                     
  3314                           ;newmain.c: 43:     if(INTCONbits.INT0IF)
  3315  001CCC  A2F2               	btfss	242,1,c	;volatile
  3316  001CCE  EF6B  F00E         	goto	i2u113_41
  3317  001CD2  EF6D  F00E         	goto	i2u113_40
  3318  001CD6                     i2u113_41:
  3319  001CD6  EF72  F00E         	goto	i2l87
  3320  001CDA                     i2u113_40:
  3321  001CDA                     
  3322                           ;newmain.c: 44:     {;newmain.c: 46:         CONVERT = 1;
  3323  001CDA  0E01               	movlw	1
  3324  001CDC  6E70               	movwf	_CONVERT^0,c	;volatile
  3325  001CDE                     
  3326                           ;newmain.c: 47:         INTCONbits.INT0IF = 0;
  3327  001CDE  92F2               	bcf	242,1,c	;volatile
  3328                           
  3329                           ;newmain.c: 48:     }
  3330  001CE0  EF85  F00E         	goto	i2l90
  3331  001CE4                     i2l87:
  3332  001CE4  A0F0               	btfss	240,0,c	;volatile
  3333  001CE6  EF77  F00E         	goto	i2u114_41
  3334  001CEA  EF79  F00E         	goto	i2u114_40
  3335  001CEE                     i2u114_41:
  3336  001CEE  EF85  F00E         	goto	i2l90
  3337  001CF2                     i2u114_40:
  3338  001CF2                     
  3339                           ;newmain.c: 51:     {;newmain.c: 53:         gameState.selected_player = (gameState.sele
      +                          cted_player + 1) % 4;
  3340  001CF2  0E01               	movlw	1
  3341  001CF4  0100               	movlb	0	; () banked
  3342  001CF6  2594               	addwf	(_gameState+20)& (0+255),w,b
  3343  001CF8  6E01               	movwf	??_FNC^0,c
  3344  001CFA  0E00               	movlw	0
  3345  001CFC  2195               	addwfc	(_gameState+21)& (0+255),w,b
  3346  001CFE  6E02               	movwf	(??_FNC+1)^0,c
  3347  001D00  0E03               	movlw	3
  3348  001D02  1401               	andwf	??_FNC^0,w,c
  3349  001D04  6F94               	movwf	(_gameState+20)& (0+255),b
  3350  001D06  6B95               	clrf	(_gameState+21)& (0+255),b
  3351  001D08                     
  3352                           ; BSR set to: 0
  3353                           ;newmain.c: 54:         INTCON3bits.INT1IF = 0;
  3354  001D08  90F0               	bcf	240,0,c	;volatile
  3355  001D0A                     i2l90:
  3356  001D0A  9273               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3357  001D0C  0011               	retfie		f
  3358  001D0E                     __end_of_FNC:
  3359                           	callstack 0
  3360                           
  3361                           	psect	rparam
  3362  0000                     
  3363                           	psect	temp
  3364  000073                     btemp:
  3365                           	callstack 0
  3366  000073                     	ds	1
  3367  0000                     int$flags	set	btemp
  3368  0000                     wtemp8	set	btemp+1
  3369  0000                     ttemp5	set	btemp+1
  3370  0000                     ttemp6	set	btemp+4
  3371  0000                     ttemp7	set	btemp+8
  3372                           
  3373                           	psect	idloc
  3374                           
  3375                           ;Config register IDLOC0 @ 0x200000
  3376                           ;	unspecified, using default values
  3377  200000                     	org	2097152
  3378  200000  FF                 	db	255
  3379                           
  3380                           ;Config register IDLOC1 @ 0x200001
  3381                           ;	unspecified, using default values
  3382  200001                     	org	2097153
  3383  200001  FF                 	db	255
  3384                           
  3385                           ;Config register IDLOC2 @ 0x200002
  3386                           ;	unspecified, using default values
  3387  200002                     	org	2097154
  3388  200002  FF                 	db	255
  3389                           
  3390                           ;Config register IDLOC3 @ 0x200003
  3391                           ;	unspecified, using default values
  3392  200003                     	org	2097155
  3393  200003  FF                 	db	255
  3394                           
  3395                           ;Config register IDLOC4 @ 0x200004
  3396                           ;	unspecified, using default values
  3397  200004                     	org	2097156
  3398  200004  FF                 	db	255
  3399                           
  3400                           ;Config register IDLOC5 @ 0x200005
  3401                           ;	unspecified, using default values
  3402  200005                     	org	2097157
  3403  200005  FF                 	db	255
  3404                           
  3405                           ;Config register IDLOC6 @ 0x200006
  3406                           ;	unspecified, using default values
  3407  200006                     	org	2097158
  3408  200006  FF                 	db	255
  3409                           
  3410                           ;Config register IDLOC7 @ 0x200007
  3411                           ;	unspecified, using default values
  3412  200007                     	org	2097159
  3413  200007  FF                 	db	255
  3414                           
  3415                           	psect	config
  3416                           
  3417                           ; Padding undefined space
  3418  300000                     	org	3145728
  3419  300000  FF                 	db	255
  3420                           
  3421                           ;Config register CONFIG1H @ 0x300001
  3422                           ;	Oscillator Selection bits
  3423                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  3424                           ;	Fail-Safe Clock Monitor Enable bit
  3425                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3426                           ;	Internal/External Oscillator Switchover bit
  3427                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3428  300001                     	org	3145729
  3429  300001  08                 	db	8
  3430                           
  3431                           ;Config register CONFIG2L @ 0x300002
  3432                           ;	Power-up Timer Enable bit
  3433                           ;	PWRT = OFF, PWRT disabled
  3434                           ;	Brown-out Reset Enable bits
  3435                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  3436                           ;	Brown Out Reset Voltage bits
  3437                           ;	BORV = 3, Minimum setting
  3438  300002                     	org	3145730
  3439  300002  1F                 	db	31
  3440                           
  3441                           ;Config register CONFIG2H @ 0x300003
  3442                           ;	Watchdog Timer Enable bit
  3443                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3444                           ;	Watchdog Timer Postscale Select bits
  3445                           ;	WDTPS = 32768, 1:32768
  3446  300003                     	org	3145731
  3447  300003  1E                 	db	30
  3448                           
  3449                           ; Padding undefined space
  3450  300004                     	org	3145732
  3451  300004  FF                 	db	255
  3452                           
  3453                           ;Config register CONFIG3H @ 0x300005
  3454                           ;	CCP2 MUX bit
  3455                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3456                           ;	PORTB A/D Enable bit
  3457                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  3458                           ;	Low-Power Timer1 Oscillator Enable bit
  3459                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3460                           ;	MCLR Pin Enable bit
  3461                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3462  300005                     	org	3145733
  3463  300005  83                 	db	131
  3464                           
  3465                           ;Config register CONFIG4L @ 0x300006
  3466                           ;	Stack Full/Underflow Reset Enable bit
  3467                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3468                           ;	Single-Supply ICSP Enable bit
  3469                           ;	LVP = OFF, Single-Supply ICSP disabled
  3470                           ;	Extended Instruction Set Enable bit
  3471                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3472                           ;	Background Debugger Enable bit
  3473                           ;	DEBUG = 0x1, unprogrammed default
  3474  300006                     	org	3145734
  3475  300006  81                 	db	129
  3476                           
  3477                           ; Padding undefined space
  3478  300007                     	org	3145735
  3479  300007  FF                 	db	255
  3480                           
  3481                           ;Config register CONFIG5L @ 0x300008
  3482                           ;	Code Protection bit
  3483                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  3484                           ;	Code Protection bit
  3485                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  3486                           ;	Code Protection bit
  3487                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  3488                           ;	Code Protection bit
  3489                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  3490  300008                     	org	3145736
  3491  300008  0F                 	db	15
  3492                           
  3493                           ;Config register CONFIG5H @ 0x300009
  3494                           ;	Boot Block Code Protection bit
  3495                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3496                           ;	Data EEPROM Code Protection bit
  3497                           ;	CPD = OFF, Data EEPROM not code-protected
  3498  300009                     	org	3145737
  3499  300009  C0                 	db	192
  3500                           
  3501                           ;Config register CONFIG6L @ 0x30000A
  3502                           ;	Write Protection bit
  3503                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  3504                           ;	Write Protection bit
  3505                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  3506                           ;	Write Protection bit
  3507                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  3508                           ;	Write Protection bit
  3509                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  3510  30000A                     	org	3145738
  3511  30000A  0F                 	db	15
  3512                           
  3513                           ;Config register CONFIG6H @ 0x30000B
  3514                           ;	Configuration Register Write Protection bit
  3515                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3516                           ;	Boot Block Write Protection bit
  3517                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  3518                           ;	Data EEPROM Write Protection bit
  3519                           ;	WRTD = OFF, Data EEPROM not write-protected
  3520  30000B                     	org	3145739
  3521  30000B  E0                 	db	224
  3522                           
  3523                           ;Config register CONFIG7L @ 0x30000C
  3524                           ;	Table Read Protection bit
  3525                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  3526                           ;	Table Read Protection bit
  3527                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3528                           ;	Table Read Protection bit
  3529                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  3530                           ;	Table Read Protection bit
  3531                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  3532  30000C                     	org	3145740
  3533  30000C  0F                 	db	15
  3534                           
  3535                           ;Config register CONFIG7H @ 0x30000D
  3536                           ;	Boot Block Table Read Protection bit
  3537                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3538  30000D                     	org	3145741
  3539  30000D  40                 	db	64
  3540                           tosu	equ	0xFFF
  3541                           tosh	equ	0xFFE
  3542                           tosl	equ	0xFFD
  3543                           stkptr	equ	0xFFC
  3544                           pclatu	equ	0xFFB
  3545                           pclath	equ	0xFFA
  3546                           pcl	equ	0xFF9
  3547                           tblptru	equ	0xFF8
  3548                           tblptrh	equ	0xFF7
  3549                           tblptrl	equ	0xFF6
  3550                           tablat	equ	0xFF5
  3551                           prodh	equ	0xFF4
  3552                           prodl	equ	0xFF3
  3553                           indf0	equ	0xFEF
  3554                           postinc0	equ	0xFEE
  3555                           postdec0	equ	0xFED
  3556                           preinc0	equ	0xFEC
  3557                           plusw0	equ	0xFEB
  3558                           fsr0h	equ	0xFEA
  3559                           fsr0l	equ	0xFE9
  3560                           wreg	equ	0xFE8
  3561                           indf1	equ	0xFE7
  3562                           postinc1	equ	0xFE6
  3563                           postdec1	equ	0xFE5
  3564                           preinc1	equ	0xFE4
  3565                           plusw1	equ	0xFE3
  3566                           fsr1h	equ	0xFE2
  3567                           fsr1l	equ	0xFE1
  3568                           bsr	equ	0xFE0
  3569                           indf2	equ	0xFDF
  3570                           postinc2	equ	0xFDE
  3571                           postdec2	equ	0xFDD
  3572                           preinc2	equ	0xFDC
  3573                           plusw2	equ	0xFDB
  3574                           fsr2h	equ	0xFDA
  3575                           fsr2l	equ	0xFD9
  3576                           status	equ	0xFD8

Data Sizes:
    Strings     11
    Constant    0
    Data        10
    BSS         79
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    105     114
    BANK0           128     12      92
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@values(BANK0[10]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 10
		 -> main@values(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S1080_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@values(BANK0[10]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@values(BANK0[10]), 

    LCDAddSpecialCharacter@data	PTR unsigned char  size(2) Largest target is 8
		 -> character(BANK0[8]), 

    LCDStr@str	PTR const unsigned char  size(2) Largest target is 10
		 -> main@values(BANK0[10]), STR_1(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _LCDStr->_LCDDat
    _LCDGoto->_LCDCmd
    _LCDAddSpecialCharacter->_LCDCmd
    _LCDAddSpecialCharacter->_LCDDat
    _InitLCD->_LCDCmd

Critical Paths under _FNC in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _FNC in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _FNC in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _FNC in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _FNC in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _FNC in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _FNC in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _FNC in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _FNC in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _FNC in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _FNC in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _FNC in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _FNC in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _FNC in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _FNC in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _FNC in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _FNC in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    9898
                                              0 BANK0     12    12      0
                            _InitLCD
             _LCDAddSpecialCharacter
                             _LCDCmd
                             _LCDDat
                            _LCDGoto
                             _LCDStr
                            _initADC
                     _readADCChannel
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8417
                                             89 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7931
                                             81 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    7458
                                             65 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    5683
                                             29 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             18 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              2 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             11 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1037
                                              2 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             20 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              2 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              2 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _readADCChannel                                       5     3      2     124
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDStr                                               5     3      2     341
                                              4 COMRAM     5     3      2
                             _LCDDat
 ---------------------------------------------------------------------------------
 (1) _LCDGoto                                              2     1      1     490
                                              4 COMRAM     2     1      1
                             _LCDCmd
 ---------------------------------------------------------------------------------
 (1) _LCDAddSpecialCharacter                               4     2      2     313
                                              4 COMRAM     4     2      2
                             _LCDCmd
                             _LCDDat
 ---------------------------------------------------------------------------------
 (2) _LCDDat                                               2     2      0      31
                                              2 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              0     0      0      31
                             _LCDCmd
 ---------------------------------------------------------------------------------
 (2) _LCDCmd                                               2     2      0      31
                                              2 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _FNC                                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitLCD
     _LCDCmd
   _LCDAddSpecialCharacter
     _LCDCmd
     _LCDDat
   _LCDCmd
   _LCDDat
   _LCDGoto
     _LCDCmd
   _LCDStr
     _LCDDat
   _initADC
   _readADCChannel
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 _FNC (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      C      5C       5       71.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     69      72       1       90.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CE      34        0.0%
DATA                 0      0      CE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Wed May 24 18:56:08 2023

                                   l41 1E72                                     l51 1DEC  
                                   l35 1AE0                                     l60 1B76  
                                   l37 1AEE                                     l38 1B02  
                                   l71 1E1E                                     l48 1E4E  
                                   l76 1D84                                     l68 19C0  
           LCDAddSpecialCharacter@data 0005  LCDAddSpecialCharacter@character_index 0007  
                                  l231 1788                                    l218 1624  
                                  l812 18DA                                    l820 10AC  
                                  l814 1914                                    l822 10B4  
                                  l840 12EA                                    l809 1898  
                                  l861 1D4C                                    l853 1BD0  
                                  l854 1BD8                                    l782 1C84  
                                  l847 149C                                    l873 1852  
                                  l881 1CC8                                    l858 1D44  
                                  l890 1DBA                                    l884 1E7E  
                                  _FNC 0008                                    _abs 1D0E  
                                  _pad 1854                                    wreg 000FE8  
                      __end_of_LCDGoto 1B78                                   ?_FNC 0001  
                                 l2000 1B78                                   l2010 1ADE  
                                 l2002 1B80                                   ?_abs 0015  
                                 l2020 1B16                                   l2012 1AF0  
                                 l2004 1B8E                                   l2030 1B64  
                                 l2022 1B24                                   l2006 1BB4  
                                 l2110 19E4                                   l2102 19C2  
                                 l2024 1B36                                   l2032 1B6E  
                                 l2040 1950                                   l2016 1E50  
                                 l2008 1A6E                                   l2120 1A02  
                                 l2112 19EE                                   l2104 19C6  
                                 l2034 1B72                                   l2026 1B44  
                                 l2018 1B06                                   l2050 197C  
                                 l2042 1952                                   l2130 1A1A  
                                 l2122 1A04                                   l2114 19F4  
                                 l2106 19CA                                   l2060 1DF6  
                                 l2028 1B56                                   l2044 1964  
                                 l2052 1980                                   l2036 1916  
                                 l2140 1A60                                   l2132 1A28  
                                 l2124 1A06                                   l2116 1A00  
                                 l2108 19D6                                   l2070 1E0C  
                                 l2062 1DF8                                   l2046 1968  
                                 l2038 191E                                   l2054 1982  
                                 l2134 1A44                                   l2126 1A08  
                                 l2118 1A00                                   l2072 1E12  
                                 l2064 1DFA                                   l2056 1DEE  
                                 l2048 196A                                   l2136 1A4A  
                                 l2128 1A0A                                   l2074 1E18  
                                 l2066 1E00                                   l2058 1DF2  
                                 l2090 1C38                                   l2138 1A54  
                                 l2068 1E06                                   l2084 1D60  
                                 l2076 1D50                                   l2092 1C48  
                                 l2086 1D72                                   l2078 1D5C  
                                 l2094 1C50                                   l2088 1D74  
                                 l1800 15D4                                   l2096 1C58  
                                 l1802 15E4                                   l1810 162A  
                                 l2098 1C74                                   l1804 1604  
                                 l1820 168A                                   l1812 1638  
                                 l1740 17D6                                   l1732 178A  
                                 l1900 1182                                   l1830 1700  
                                 l1822 16A8                                   l1814 1658  
                                 l1742 180C                                   l1734 179C  
                                 l1750 1CA4                                   l1910 123E  
                                 l1902 1188                                   l1840 1768  
                                 l1832 1720                                   l1824 16B0  
                                 l1816 165C                                   l1808 1626  
                                 l1736 17AE                                   l1752 1CA8  
                                 l1760 1DAE                                   l1920 128C  
                                 l1912 1258                                   l1904 11EC  
                                 l1770 14D0                                   l1834 1732  
                                 l1826 16C4                                   l1818 166A  
                                 l1738 17B8                                   l1746 1C86  
                                 l1754 1D86                                   l1850 1884  
                                 l1922 129E                                   l1906 1206  
                                 l1914 1266                                   l1780 1512  
                                 l1772 14D4                                   l1764 149E  
                                 l1828 16D2                                   l1836 1738  
                                 l1748 1C92                                   l1756 1D92  
                                 l1860 18E8                                   l1852 1890  
                                 l1844 1854                                   l1924 12AA  
                                 l1916 1278                                   l1908 1224  
                                 l1940 1332                                   l1932 12EC  
                                 l1790 156C                                   l1782 1530  
                                 l1774 14E2                                   l1766 14A2  
                                 l1838 1748                                   l1758 1D96  
                                 l1862 18FC                                   l1854 18A4  
                                 l1846 1862                                   l1926 12B2  
                                 l1918 1286                                   l1870 100E  
                                 l1950 13FA                                   l1942 1356  
                                 l1934 1310                                   l1792 159A  
                                 l1784 1538                                   l1776 1502  
                                 l1768 14B0                                   l1856 18B8  
                                 l1848 1876                                   l1928 12C2  
                                 l1880 1086                                   l1872 102E  
                                 l1952 141E                                   l1960 144C  
                                 l1944 137A                                   l1936 131E  
                                 l1794 15BA                                   l1786 154C  
                                 l1778 1506                                   l1866 1D0E  
                                 l1858 18BC                                   l1890 10E2  
                                 l1882 10A0                                   l1874 1056  
                                 l1962 145A                                   l1954 142C  
                                 l1946 13C2                                   l1938 132E  
                                 l1980 1E2C                                   l1796 15BC  
                                 l1788 155A                                   l1868 1D28  
                                 l1892 10EA                                   l1884 10BC  
                                 l1876 1076                                   l1956 1440  
                                 l1982 1E3C                                   l1974 1E22  
                                 l1990 1DC6                                   l1798 15CE  
                                 l1894 10F4                                   l1886 10CE  
                                 l1878 1084                                   l1966 1466  
                                 ?_pad 0013                                   l1984 1E3E  
                                 l1976 1E26                                   l1992 1DC8  
                                 l1896 10FA                                   l1888 10DC  
                                 l1968 148A                                   l1978 1E2A  
                                 l1994 1DD8                                   l1986 1DBE  
                                 l1898 117C                                   l1996 1DDA  
                                 l1988 1DC2                                   l1998 1DEA  
                                 STR_1 1001                                   STR_2 1009  
                                 u1200 180C                                   u1201 1808  
                                 u1210 1CC8                                   u1211 1CC4  
                                 u1300 1638                                   u1220 1DAE  
                                 u1301 1634                                   u1221 1DAA  
                                 u1230 14B0                                   u1310 166A  
                                 u1231 14AC                                   u1311 1666  
                                 u1240 14E2                                   u1320 16A8  
                                 u1400 1D28                                   u1241 14DE  
                                 u1321 16A4                                   u1401 1D24  
                                 u1330 16D2                                   u1170 179C  
                                 u1410 103E                                   u1251 150C  
                                 u1331 16CE                                   u1171 1798  
                                 u1411 1038                                   u1260 1530  
                                 u1340 1700                                   u1180 17AE  
                                 u1500 123E                                   u1420 1040  
                                 u1261 152C                                   u1341 16FC  
                                 u1181 17AA                                   u1501 123A  
                                 u1270 155A                                   u1350 1748  
                                 u1190 17D6                                   u1510 1258  
                                 u1430 1056                                   u1271 1556  
                                 u1351 1744                                   u1191 17D2  
                                 u1511 1254                                   u1431 1052  
                                 u1280 159A                                   u1360 1862  
                                 u1520 1266                                   u1440 1084  
                                 u1600 1BD0                                   u1281 1596  
                                 u1361 185E                                   u1521 1262  
                                 u1441 1080                                   u1601 1BCC  
                                 u1610 1AEE                                   u1290 15E4  
                                 u1370 1884                                   u1530 1278  
                                 u1450 10A0                                   u1611 1AEA  
                                 u1291 15E0                                   u1371 1880  
                                 u1531 1274                                   u1451 109C  
                                 u1700 1D84                                   u1620 1B16  
                                 u1380 18DA                                   u1540 1286  
                                 u1460 10CE                                   u1701 1D80  
                                 u1621 1B12                                   u1381 18D6  
                                 u1541 1282                                   u1461 10CA  
                                 u1630 1B36                                   u1390 18E8  
                                 u1550 129E                                   u1470 10DC  
                                 u1631 1B32                                   u1391 18E4  
                                 u1551 129A                                   u1471 10D8  
                                 u1711 19FA                                   u1640 1B56  
                                 u1480 1206                                   u1560 1310  
                                 u1720 1A1A                                   u1641 1B52  
                                 u1481 1202                                   u1561 130C  
                                 u1721 1A16                                   u1650 194C  
                                 u1490 1224                                   u1570 1356  
                                 u1491 1220                                   u1571 1352  
                                 u1660 1964                                   u1580 137A  
                                 u1661 1960                                   u1581 1376  
                                 u1670 197C                                   u1590 141E  
                                 u1671 1978                                   u1591 141A  
                                 u1680 19B0                                   u1737 1DCE  
                                 u1657 1942                                   u1690 19C0  
                                 u1747 1DE0                                   u1691 19BC  
                                 u1757 1E32                                   u1767 1E44  
                                 u1687 19A6                                   i2l90 1D0A  
                                 i2l87 1CE4                                   abs@a 0015  
                                 _dbuf 00A8                                   _main 19C2  
                                 _dtoa 100E                                   _prec 006C  
                                 _nout 00A6                                   pad@i 001A  
                                 pad@p 0017                                   fsr1h 000FE2  
                                 fsr2h 000FDA                                   indf1 000FE7  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 pad@w 001C                                   fsr2l 000FD9  
                                 btemp 0073                                   prodl 000FF3  
                                 start 000E                           ___param_bank 000000  
                      __end_of_InitLCD 1E20                                  ??_FNC 0001  
                                ??_abs 0017                                  ??_pad 0019  
                      __end_of___aodiv 1626                                  ?_main 0001  
                                ?_dtoa 001E                        __end_of___aomod 178A  
                         vfpfcnvrt@fmt 0044                                  _PORTD 000F83  
                                _TRISD 000F95                        __end_of_initADC 1E74  
                                _flags 006E                                  _lcd_x 0072  
                                _lcd_y 0071                                  _fputc 178A  
                                _fputs 1C86                                  pad@fp 0013  
                                _width 006A                                  _putch 1E7E  
                                dtoa@d 0020                                  dtoa@i 0040  
                                dtoa@n 0038                                  dtoa@p 0032  
                                dtoa@s 0036                                  dtoa@w 0034  
                                tablat 000FF5                                  ttemp5 0074  
                                ttemp6 0077                                  ttemp7 007B  
                                status 000FD8                                  wtemp8 0074  
                      __end_of_sprintf 1C86                        __initialization 1BDA  
                         __end_of_main 1A6C                           __end_of_dtoa 12EC  
                       _readADCChannel 1A6C                                 ??_main 006A  
                               ??_dtoa 0028                          __activetblptr 000002  
                            ??_LCDGoto 0006                                 ?_fputc 0003  
                               ?_fputs 000C                                 _ADRESH 000FC4  
                               _ADRESL 000FC3                                 ?_putch 0001  
                               _LCDDat 1DBC                                 _LCDCmd 1E20  
                               _LCDStr 1916                                 i2l1690 1D08  
                               i2l1682 1CCC                                 i2l1684 1CDA  
                               i2l1686 1CDE                                 i2l1688 1CF2  
                            ??_InitLCD 0005                           vfprintf@cfmt 0058  
               __end_of_readADCChannel 1B04                              ??___aodiv 0013  
                            ??___aomod 0013                                 clear_0 1C18  
                               clear_1 1C24                                 pad@buf 0015  
                               dtoa@fp 001E                                 _strlen 1D86  
                            ??_initADC 0003                                 fputc@c 0003  
                               fputs@c 0010                                 fputs@i 0011  
                         __pdataCOMRAM 0071                                 fputs@s 000C  
                         __mediumconst 0000                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                               putch@c 0001                       __end_of_vfprintf 1BDA  
                            ??_sprintf 0060                              LCDDat@dat 0004  
                            LCDCmd@cmd 0004                             __accesstop 0080  
              __end_of__initialization 1C2A                          ___rparam_used 000001  
                       __pcstackCOMRAM 0001                        ?_readADCChannel 0003  
                         __pidataBANK0 1E74                              LCDStr@str 0005  
                        __end_of_fputc 1854               ??_LCDAddSpecialCharacter 0007  
                        __end_of_fputs 1CCA                          __end_of_putch 1E80  
                              ??_fputc 0007                                ??_fputs 0010  
                              ??_putch 0003                                ?_LCDDat 0001  
                              ?_LCDCmd 0001                             __pbssBANK0 0080  
                              ?_LCDStr 0005                                LCDStr@i 0009  
                       main@convertion 00D2                                ?_strlen 0003  
                              _CONVERT 0070                                _LCDGoto 1B04  
                   __size_of_vfpfcnvrt 01B2                        __size_of_LCDDat 0032  
                      __size_of_LCDCmd 0030                        __size_of_LCDStr 00AC  
                              _InitLCD 1DEE                                __Hparam 0000  
                              __Lparam 0000                                ___aodiv 149E  
                              ___aomod 1626                              ?_vfprintf 0052  
                         __psmallconst 1000        __size_of_LCDAddSpecialCharacter 0038  
                              __pcinit 1BDA                                __ramtop 1000  
                              __ptext0 19C2                                __ptext1 1C38  
                              __ptext2 1B78                                __ptext3 12EC  
                              __ptext4 100E                                __ptext5 1854  
                              __ptext6 1D86                                __ptext7 1C86  
                              __ptext8 178A                                __ptext9 1E7E  
                              _initADC 1E50                           __size_of_FNC 1D06  
                      __size_of_strlen 0036                           __size_of_abs 0040  
                         __size_of_pad 00C2                                _sprintf 1C38  
                       __pintcode_body 1CCA                   end_of_initialization 1C2A  
                              fputc@fp 0005                          __Lmediumconst 0000  
                              int_func 1CCA                                fputs@fp 000E  
                    __end_of_vfpfcnvrt 149E                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc1 000FE6                                postinc2 000FDE  
                           ??_vfprintf 0058                                strlen@a 0005  
                              strlen@s 0003                              _PORTEbits 000F84  
                            _TRISAbits 000F92                              _TRISBbits 000F93  
                            _TRISEbits 000F96                 _LCDAddSpecialCharacter 1D4E  
                       __end_of_LCDDat 1DEE                         __end_of_LCDCmd 1E50  
                       __end_of_LCDStr 19C2                       ??_readADCChannel 0005  
                           LCDGoto@p_1 0005                             LCDGoto@p_2 0006  
                           main@values 00C8                            vfpfcnvrt@ap 0046  
                          vfpfcnvrt@fp 0042                            vfpfcnvrt@ll 004A  
                        __pidataCOMRAM 1E7C                         __end_of_strlen 1DBC  
                  start_initialization 1BDA                            __end_of_FNC 1D0E  
                          __end_of_abs 1D4E                            __end_of_pad 1916  
                             ??_LCDDat 0003                               ??_LCDCmd 0003  
                             ??_LCDStr 0007                            vfprintf@fmt 0054  
              LCDAddSpecialCharacter@i 0008                            __pdataBANK0 00D4  
                             ??_strlen 0005                               ?_LCDGoto 0005  
                          __pbssCOMRAM 006A                          __pcstackBANK0 00C8  
                     ___aodiv@dividend 0003                               ?_InitLCD 0001  
                            _character 00D4                              _gameState 0080  
                            _dtoa$1153 0030                              __pintcode 0008  
                             ?___aodiv 0003                               ?___aomod 0003  
                     ___aodiv@quotient 0015                      __size_of_vfprintf 0062  
                             ?_initADC 0001                            __smallconst 1000  
                             ?_sprintf 005A                         __size_of_fputc 00CA  
                       __size_of_fputs 0044                         __size_of_putch 0002  
                readADCChannel@channel 0007                               i2u113_40 1CDA  
                             i2u113_41 1CD6                               i2u114_40 1CF2  
                             i2u114_41 1CEE                               _PIR1bits 000F9E  
                            main@F2965 009C                              _vfpfcnvrt 12EC  
                           _ADCON0bits 000FC2                             _ADCON1bits 000FC1  
                           _ADCON2bits 000FC0                       __size_of_LCDGoto 0074  
              ?_LCDAddSpecialCharacter 0005                            _INTCON3bits 000FF0  
                            copy_data0 1BEE                       __size_of_InitLCD 0032  
                             __Hrparam 0000                             vfprintf@ap 0056  
                             __Lrparam 0000                             vfprintf@fp 0052  
                     __size_of___aodiv 0188                       __size_of___aomod 0164  
                           ?_vfpfcnvrt 0042                        ___aodiv@divisor 000B  
                      ___aodiv@counter 0013         __end_of_LCDAddSpecialCharacter 1D86  
                           sprintf@fmt 005C                       __size_of_initADC 0024  
                             __ptext10 1D0E                               __ptext11 1626  
                             __ptext20 1E20                               __ptext12 149E  
                             __ptext13 1A6C                               __ptext14 1E50  
                             __ptext15 1916                               __ptext16 1B04  
                             __ptext17 1D4E                               __ptext18 1DBC  
                             __ptext19 1DEE                       __size_of_sprintf 004E  
                        __size_of_main 00AA                          __size_of_dtoa 02DE  
                             int$flags 0073                               _vfprintf 1B78  
                     ___aomod@dividend 0003                             _INTCONbits 000FF2  
                             intlevel2 0000                              sprintf@ap 0062  
                      ___aomod@divisor 000B                __size_of_readADCChannel 0098  
                          ??_vfpfcnvrt 0048                        ___aomod@counter 0013  
                             sprintf@f 0064                               sprintf@s 005A  
                         ___aodiv@sign 0014                           ___aomod@sign 0014  
